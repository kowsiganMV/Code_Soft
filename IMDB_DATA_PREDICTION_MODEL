{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fd641b50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:16.489297Z",
     "iopub.status.busy": "2024-04-26T15:20:16.488428Z",
     "iopub.status.idle": "2024-04-26T15:20:19.483686Z",
     "shell.execute_reply": "2024-04-26T15:20:19.481940Z"
    },
    "papermill": {
     "duration": 3.014492,
     "end_time": "2024-04-26T15:20:19.487595",
     "exception": false,
     "start_time": "2024-04-26T15:20:16.473103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "18ab1198",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.518980Z",
     "iopub.status.busy": "2024-04-26T15:20:19.518400Z",
     "iopub.status.idle": "2024-04-26T15:20:19.533226Z",
     "shell.execute_reply": "2024-04-26T15:20:19.531634Z"
    },
    "papermill": {
     "duration": 0.033613,
     "end_time": "2024-04-26T15:20:19.535955",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.502342",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/imdb-india-movies/IMDb Movies India.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ed6a6b73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.564672Z",
     "iopub.status.busy": "2024-04-26T15:20:19.564293Z",
     "iopub.status.idle": "2024-04-26T15:20:19.685095Z",
     "shell.execute_reply": "2024-04-26T15:20:19.680895Z"
    },
    "papermill": {
     "duration": 0.138441,
     "end_time": "2024-04-26T15:20:19.688006",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.549565",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>J.S. Randhawa</td>\n",
       "      <td>Manmauji</td>\n",
       "      <td>Birbal</td>\n",
       "      <td>Rajendra Bhatia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>#Gadhvi (He thought he was Gandhi)</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>109 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8</td>\n",
       "      <td>Gaurav Bakshi</td>\n",
       "      <td>Rasika Dugal</td>\n",
       "      <td>Vivek Ghamande</td>\n",
       "      <td>Arvind Jangid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>#Homecoming</td>\n",
       "      <td>(2021)</td>\n",
       "      <td>90 min</td>\n",
       "      <td>Drama, Musical</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Soumyajit Majumdar</td>\n",
       "      <td>Sayani Gupta</td>\n",
       "      <td>Plabita Borthakur</td>\n",
       "      <td>Roy Angana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>#Yaaram</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>110 min</td>\n",
       "      <td>Comedy, Romance</td>\n",
       "      <td>4.4</td>\n",
       "      <td>35</td>\n",
       "      <td>Ovais Khan</td>\n",
       "      <td>Prateik</td>\n",
       "      <td>Ishita Raj</td>\n",
       "      <td>Siddhant Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>...And Once Again</td>\n",
       "      <td>(2010)</td>\n",
       "      <td>105 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Amol Palekar</td>\n",
       "      <td>Rajat Kapoor</td>\n",
       "      <td>Rituparna Sengupta</td>\n",
       "      <td>Antara Mali</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Name    Year Duration            Genre  \\\n",
       "0                                         NaN      NaN            Drama   \n",
       "1  #Gadhvi (He thought he was Gandhi)  (2019)  109 min            Drama   \n",
       "2                         #Homecoming  (2021)   90 min   Drama, Musical   \n",
       "3                             #Yaaram  (2019)  110 min  Comedy, Romance   \n",
       "4                   ...And Once Again  (2010)  105 min            Drama   \n",
       "\n",
       "   Rating Votes            Director       Actor 1             Actor 2  \\\n",
       "0     NaN   NaN       J.S. Randhawa      Manmauji              Birbal   \n",
       "1     7.0     8       Gaurav Bakshi  Rasika Dugal      Vivek Ghamande   \n",
       "2     NaN   NaN  Soumyajit Majumdar  Sayani Gupta   Plabita Borthakur   \n",
       "3     4.4    35          Ovais Khan       Prateik          Ishita Raj   \n",
       "4     NaN   NaN        Amol Palekar  Rajat Kapoor  Rituparna Sengupta   \n",
       "\n",
       "           Actor 3  \n",
       "0  Rajendra Bhatia  \n",
       "1    Arvind Jangid  \n",
       "2       Roy Angana  \n",
       "3  Siddhant Kapoor  \n",
       "4      Antara Mali  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/imdb-india-movies/IMDb Movies India.csv', encoding='latin-1')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "391b3bee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.720627Z",
     "iopub.status.busy": "2024-04-26T15:20:19.719870Z",
     "iopub.status.idle": "2024-04-26T15:20:19.776482Z",
     "shell.execute_reply": "2024-04-26T15:20:19.775264Z"
    },
    "papermill": {
     "duration": 0.07638,
     "end_time": "2024-04-26T15:20:19.779200",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.702820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 15509 entries, 0 to 15508\n",
      "Data columns (total 10 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Name      15509 non-null  object \n",
      " 1   Year      14981 non-null  object \n",
      " 2   Duration  7240 non-null   object \n",
      " 3   Genre     13632 non-null  object \n",
      " 4   Rating    7919 non-null   float64\n",
      " 5   Votes     7920 non-null   object \n",
      " 6   Director  14984 non-null  object \n",
      " 7   Actor 1   13892 non-null  object \n",
      " 8   Actor 2   13125 non-null  object \n",
      " 9   Actor 3   12365 non-null  object \n",
      "dtypes: float64(1), object(9)\n",
      "memory usage: 1.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ced1c558",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.809859Z",
     "iopub.status.busy": "2024-04-26T15:20:19.808632Z",
     "iopub.status.idle": "2024-04-26T15:20:19.817251Z",
     "shell.execute_reply": "2024-04-26T15:20:19.815697Z"
    },
    "papermill": {
     "duration": 0.026749,
     "end_time": "2024-04-26T15:20:19.820141",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.793392",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15509, 10)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f2247250",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.851168Z",
     "iopub.status.busy": "2024-04-26T15:20:19.850651Z",
     "iopub.status.idle": "2024-04-26T15:20:19.876297Z",
     "shell.execute_reply": "2024-04-26T15:20:19.874762Z"
    },
    "papermill": {
     "duration": 0.045863,
     "end_time": "2024-04-26T15:20:19.880049",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.834186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name           0\n",
       "Year         528\n",
       "Duration    8269\n",
       "Genre       1877\n",
       "Rating      7590\n",
       "Votes       7589\n",
       "Director     525\n",
       "Actor 1     1617\n",
       "Actor 2     2384\n",
       "Actor 3     3144\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0c3d394d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:19.914211Z",
     "iopub.status.busy": "2024-04-26T15:20:19.913818Z",
     "iopub.status.idle": "2024-04-26T15:20:20.929163Z",
     "shell.execute_reply": "2024-04-26T15:20:20.927946Z"
    },
    "papermill": {
     "duration": 1.036861,
     "end_time": "2024-04-26T15:20:20.932236",
     "exception": false,
     "start_time": "2024-04-26T15:20:19.895375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAiEAAAHSCAYAAAA6+RutAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACO2UlEQVR4nO3dd1gU19cH8O/SERDpRalqAAuooCgmVgS7/jT2CIg9FoSoiIpgRSWiiTUqIrbYYktMsEBQUWLHEmMBQSICCogKKgg77x+8TFx3UVxmmQHOJ88+cWdm796ZYXfO3nvnHhHDMAwIIYQQQqqZEt8VIIQQQkjdREEIIYQQQnhBQQghhBBCeEFBCCGEEEJ4QUEIIYQQQnhBQQghhBBCeEFBCCGEEEJ4QUEIIYQQQnhBQQghhBBCeEFBCCGEEEJ4UeODkPXr18Pa2hoaGhpwdXXFpUuX+K4SIYQQQiqhRgch+/btQ0BAAEJCQnDt2jU4OTnB09MTT58+5btqhBBCSI1x9uxZ9OvXD+bm5hCJRDhy5MgnXxMfH482bdpAXV0dTZo0wfbt2z/7fWt0EBIREYHx48djzJgxaNasGTZt2oR69eph27ZtfFeNEEIIqTEKCwvh5OSE9evXV2r71NRU9OnTB127dkVSUhJmzJiBcePG4cSJE5/1vqKamkW3uLgY9erVw8GDBzFw4EB2ube3N/Lz83H06FH+KkcIIYTUUCKRCIcPH5a4tn4oMDAQx48fx+3bt9llw4cPR35+PmJiYir9XipVqSifcnJyUFpaChMTE4nlJiYmuHv3rszXFBUVoaioSGKZuro61NXVFVZPQgghhA+KvOYlJibC3d1dYpmnpydmzJjxWeXU2CBEHmFhYVi4cKHEMpGSNpSU6/NUI0IIITVJSXGGQst/l/OQs7LC1u2QuuaFhIQgNDS0ymVnZWXJbAR4+fIl3rx5A01NzUqVU2PHhBgaGkJZWRnZ2dkSy7Ozs2FqairzNUFBQXjx4oXEQ6SkUx3VJYQQQqqVrGteUFAQ39WSUGNbQtTU1ODs7IzY2Fi230osFiM2NhZTp06V+RpZzVAikUjRVSWEEEIqR1zKWVGKHG5gamoqsxGgfv36lW4FAWpwEAIAAQEB8Pb2houLC9q1a4c1a9agsLAQY8aM4btqhHzSmyfn+K5CjaVp/hXfVSBEMRgx3zWolA4dOuD333+XWHbq1Cl06NDhs8qp0UHIsGHD8OzZMyxYsABZWVlo1aoVYmJipPqpCBEiupASQoSioKAAycnJ7PPU1FQkJSVBX18flpaWCAoKQkZGBnbs2AEAmDRpEtatW4fZs2fD19cXcXFx2L9/P44fP/5Z71tjb9HliopaQ76rUGMJ/Ze80C/yQj9+Qib0c0tqL4UPTM38h7OyVM0cKr1tfHw8unbtKrXc29sb27dvh4+PD9LS0hAfHy/xGn9/f9y5cweNGjVCcHAwfHx8PquOFIRQECI3oV9EhX6hEvrxEzKhn1sho7+7qlE1tFVo+cVP/uasLDXz5pyVpSgUhFAQQgghpJIU3RJS/PgWZ2WpNWrJWVmKUqPHhBB+Cf0XFf1aJoQQYeMlCAkNDZWaQMXOzo6d6TQlJQUzZ85EQkICioqK0LNnT6xdu5YdcFpR3xUAXLp0CW3btlXsDhDCAaEHcUJGASaptWrI3TFc4a0lpHnz5jh9+vR/FVEpq0phYSE8PDzg5OSEuLg4AEBwcDD69euHv/76C0pKSnBzc0NmZqZEecHBwYiNjYWLi0v17QQhVUAXUkKIFA7nCakJeAtCVFRUZM5sev78eaSlpeH69euoX79sOvXo6Gjo6ekhLi4O7u7uUFNTk3jtu3fvcPToUUybNo0mH6tGdBElhBBSFbwFIQ8ePIC5uTk0NDTQoUMHhIWFwdLSEkVFRRCJRBKzvGloaEBJSQkJCQlSCXMA4NixY8jNzaVJyqqZ0LsThB4kCf34CRmdW1JrUXeM4rm6umL79u2ws7NDZmYmFi5ciK+++gq3b99G+/btoaWlhcDAQCxbtgwMw2DOnDkoLS2V6oIpFxkZCU9PTzRq1Oij7ysroyDDMIJuPaEvM0JqHqEHSUR+ir47BuK6FYQI4hbd/Px8WFlZISIiAmPHjsXJkycxefJkpKamQklJCSNGjMCdO3fQrl07bNy4UeK1jx8/hpWVFfbv34/Bgwd/9H1kDYilLLryowCpauhCRYg0oX+vKHyekIeXOCtLzbYdZ2UpiiBu0W3QoAG++OILdspYDw8PpKSkICcnByoqKmjQoAFMTU1hayt98qOiomBgYID+/ft/8n2CgoIQEBAgsUzPwJ6bnSCCI/SLvNC/bIVM6OeWyE/o51bRLSEMdcdUv4KCAqSkpGD06NESyw0NDQEAcXFxePr0qVSgwTAMoqKi4OXlBVVV1U++D2XRJUIi9C9bQggP6lh3DC9ByMyZM9GvXz9YWVnhyZMnCAkJgbKyMkaMGAGgrHXDwcEBRkZGSExMhJ+fH/z9/WFnZydRTlxcHFJTUzFu3Dg+dqPOE/pFlFoaai+h/+0RQiqHlyDk8ePHGDFiBHJzc2FkZIQvv/wSf/31F4yMjAAA9+7dQ1BQEPLy8mBtbY158+bB399fqpzIyEi4ubnB3p66VPgg9Is8XagIITVOHeuOEcTAVD5R7hhCCCGVpegxIUV3z3BWlrp9Z87KUhRBjAkhhBBCCOpcS4gS3xUghBBCSN1ELSGEEEKIUNDdMVVz9uxZhIeH4+rVq8jMzMThw4cxcOBAdv2hQ4ewadMmXL16FXl5ebh+/TpatWolUcansui+r6ioCK6urrhx44bMsoji0MDUqhH68RMyoZ9bQuRWx7pjOA9CCgsL4eTkBF9fXwwaNEjm+i+//BJDhw7F+PHjZa7/VBbd982ePRvm5ua4ceMG17tCiELRhZQQUtdxHoT06tULvXr1qnB9+YRkaWlpMtdXJotuuT/++AMnT57EL7/8gj/++IO7nSCVQhdRQgjhWB3rjhHcwNRPZdEtl52djfHjx2Pnzp2oV68eH1UlhBBCOMUwpZw9agLBDUytTBZdhmHg4+ODSZMmwcXFpcJWFaJYQh/TIPSWGqEfPyET+rklhFSO4IIQIyMjHDhwAJMnT8aPP/7IZtFt06YNOx5k7dq1ePXqFYKCgj6r7KKiIhQVFUksYxiG8scQQjhFASaRGw1M5d+nsujGxcUhMTFRKhmdi4sLRo0ahejoaJnlhoWFYeHChRLLREraECnXV8yOEEIUgi7ypNaqY2NCFDptu0gkkrpFt1xaWhpsbGwqdVtt+YDUf/75B3Z2dkhPT8fLly/Z9U+ePIGnpycOHjwIV1dXNGrUSGY5slpC9AzsqSWEEEJIpSh62va3V49wVpaG80DOylIUzltCCgoKkJyczD5PTU1FUlIS9PX1YWlpiby8PKSnp+PJkycAypLVAYCpqSlMTU0BfDqLrqWlpcR7amtrAwAaN25cYQACAOrq6lKtJxSAEEIIIfzgPAi5cuUKunbtyj4PCAgAAHh7e2P79u04duwYxowZw64fPnw4ACAkJAShoaEAKp9Fl/BL6E3iQh+8KPTjJ2RCP7eEyE1cM+5q4Qpl0aUsunIT+kVU6BcqoR8/IRP6uSW1l8K7Yy4d4KwsjXZDOCtLUQQ5MJXUDHQhIKTmoeCXCAkFIYTwhII4wgf6u6saRbeE1LW7YygIIYQQQoSijs0TIrhp2wkhhBBSN3AehJw9exb9+vWDubk5RCIRjhw5IrFeJBLJfISHh7PbXLt2DT169ECDBg1gYGCACRMmoKCgQKKc6dOnw9nZGerq6p+cZ4QQQgipEcRi7h41AOfdMYWFhXBycoKvry8GDRoktb48/0u5P/74A2PHjsXgwYMBlE085u7ujmHDhmHdunV4+fIlZsyYAR8fHxw8eFDitb6+vrh48SJu3rzJ9W6QShD6ADfq+yaE1Dg1JHjgCudBSK9evdCrV68K15dPSFbu6NGj6Nq1Kzsl+2+//QZVVVWsX7+ezRWzadMmODo6Ijk5GU2aNAEA/PjjjwCAZ8+eURBCZBJ6kETkRwFm7UWf27qF14Gp2dnZOH78uESul6KiIqipqbEBCABoamoCABISEtgghPCPLgSEEK4J/XtF0XfHMEzdmqyM14Gp0dHR0NHRkei26datG7KyshAeHo7i4mI8f/4cc+bMASDdlfO5ioqK8PLlS4lHHZ+rjRBCiJDUsTEhvAYh27Ztw6hRo6ChocEua968OaKjo7Fq1SrUq1cPpqamsLGxgYmJiUTriDzCwsKgq6sr8WDEr6q6G4QQQgg3GDF3jxqAtyDk3LlzuHfvHsaNGye1buTIkcjKykJGRgZyc3MRGhqKZ8+eseNG5BUUFIQXL15IPERKOlUqkxBCCCHy4W1MSGRkJJydneHk5FThNiYmJgDKWkw0NDTQo0ePKr0nZdHlltAHkAm9b5kQQqTUkG4UrnAehBQUFCA5OZl9npqaiqSkJOjr68PS0hIA8PLlSxw4cACrVq2SWca6devg5uYGbW1tnDp1CrNmzcLy5cvRoEEDdpvk5GQUFBQgKysLb968QVJSEgCgWbNmUFNT43q3COGc0IM4IRN6gEnnlsithnSjcIXzIOTKlSvo2rUr+zwgIAAA4O3tje3btwMA9u7dC4ZhMGLECJllXLp0CSEhISgoKIC9vT1++uknjB49WmKbcePG4cyZM+zz1q1bAygLeqytrTncI1IRoV8ICOGLkD8bFCARIRExdfz2EBW1hnxXgdRRdDGQn5Av8gCd29pM1bBqYxM/5c3JDZyVpenxLWdlKQolsCNyE/oXrdAvVKT2or+92kvhWXSpO4aQyqEv2qqh40cIqesoCCFyo5aQqhH68RMyoZ9bIr86/7mgu2OqJiwsDIcOHcLdu3ehqakJNzc3rFixAnZ2duw2EydOxOnTp/HkyRNoa2uz29jb27PbXL58GXPmzMHVq1chEonQrl07rFy5UuKW3hMnTiAkJAR///03NDQ00KlTJ6xatYoGphIA9GVGiCz0uRC4OhaEcD4wtWfPnhg+fDjatm2LkpISzJ07F7dv38adO3egpaUFANi8eTPs7e1haWmJvLw8hIaGIikpCampqVBWVkZBQQGsrKzQv39/zJkzByUlJQgJCUFCQgL+/fdfqKqqIjU1FQ4ODggICMDYsWPx4sUL+Pv749WrV7h27Vql60sDU+Un9C8z+rVMCOGaoseEvDm+hrOyNPvM4KwsRVH43THPnj2DsbExzpw5g06dOsnc5ubNm3ByckJycjIaN26MK1euoG3btkhPT4eFhQUA4NatW3B0dMSDBw/QpEkTHDx4ECNGjEBRURE7nfuvv/6KAQMGoKioCKqqqpWqHwUh8qMgpGqEfvyETOjnVsjo765qFH53zG8RnJWl2TeAs7IUReFjQl68eAEA0NfXl7m+sLAQUVFRsLGxYQMOOzs7GBgYIDIyEnPnzkVpaSkiIyPh4ODAdrU4OztDSUkJUVFR8PHxQUFBAXbu3Al3d/dKByCkauhCUDV0/Agf6O+uahR+dwx1x3BHLBajf//+yM/PR0JCgsS6DRs2YPbs2SgsLISdnR2OHz+Oxo0bs+tv376NgQMHIjU1FQDQtGlTnDhxAlZWVuw2Z86cwdChQ5Gbm4vS0lJ06NABv//+u8TMqu8rKipCUVGRxDI9A3uaul1O9IuK8IUupIQvCu+OObqSs7I0B8zmrCxFUWgQMnnyZPzxxx9ISEhAo0aNJNa9ePECT58+RWZmJr7//ntkZGTg/Pnz0NDQwJs3b9ClSxfY29tj6tSpKC0txffff4+7d+/i8uXL0NTURFZWFjp16oSBAwdixIgRePXqFRYsWAAVFRWcOnVKZmARGhqKhQsXSh4AJW0oKddX1CGo1YQehAj9QiX040cIkabw7hgKQrgxdepUHD16FGfPnoWNjc1Hty0uLoaenh62bt2KESNGsN0wmZmZ7HiP8m0iIyMxfPhwBAcHIyYmBpcvX2bLefz4MSwsLJCYmIj27dtLvQ+1hHBL6BdRCkJqL6GfW1J7Kbwl5PByzsrS/N8czspSFM7HhDAMg2nTpuHw4cOIj4//ZABS/hqGYdgA4fXr11BSUpIIDsqfi/+/v6x8m/cpKysDALvNhyiLbt1CF3nCF/rbI3KjGVOrZsqUKdizZw+OHj0KHR0dZGVlAQB0dXWhqamJhw8fYt++ffDw8ICRkREeP36M5cuXQ1NTE7179wYA9OjRA7NmzcKUKVMwbdo0iMViLF++HCoqKmxyvD59+mD16tVYtGgR2x0zd+5cWFlZscnsiGLRr1FCZKPPRu2l8IGpdQznQcjGjRsBAF26dJFYXn4Xi4aGBs6dO4c1a9bg+fPnMDExQadOnXDhwgUYGxsDAOzt7fHrr79i4cKF6NChA5SUlNC6dWvExMTAzMwMANCtWzfs2bMHK1euxMqVK1GvXj106NABMTEx0NTU5Hq3eEO/qOQn9AsBnVtCiBS6O6ZuoXlC5Cf0i6jQgxBCSM2j8DEh+xdxVpbm0AWclaUolDuGEJ4IPYgTMqEHmHRuCakcCkIIIYRjQg6SKEASuDrWOUFBCCGE1CFCDpAACpLq2pgQXrLopqSkYObMmUhISEBRURF69uyJtWvXwsTEhN3m/v37mDVrFs6fP4/i4mI4Ojpi8eLF7N0xgOzba3/++WcMHz6c690iMgj9y0zo6PgRIk3onwu6O4ZbnAchZ86cwZQpUySy6Hp4eLBZdAsLC+Hh4QEnJyfExcUBAIKDg9GvXz/89ddf7Nwfffv2RdOmTREXFwdNTU2sWbMGffv2RUpKCkxNTdn3i4qKQs+ePdnnFU3ZTrgn9F8sQv8yE/rxEzKhn1tC5FbHWkKqPYvuyZMn0atXLzx//hz165dNl/7ixQvo6enh5MmTcHd3R05ODoyMjHD27Fl89VXZl82rV69Qv359nDp1Cu7u7mWVF4lw+PBhDBw4UO760d0xhC8UhMiPghDCF4XfHbNrHmdlaX6zlLOyFKXas+gWFRVBJBJJzFyqoaEBJSUlJCQkwN3dHQYGBrCzs8OOHTvQpk0bqKur46effoKxsTGcnZ0lyp8yZQrGjRsHW1tbTJo0CWPGjKFZUEmNQBdSQoiUOtYSotAgRCwWY8aMGejYsSNatGgBAGjfvj20tLQQGBiIZcuWgWEYzJkzB6WlpcjMzARQ1sJx+vRpDBw4EDo6OlBSUoKxsTFiYmKgp6fHlr9o0SJ069YN9erVw8mTJ/Htt9+ioKAA06dPl1kfWbljGIahoEVOQv8lL/SLvNCPn5AJ/dwSUlOtX78e4eHhyMrKgpOTE9auXYt27dpVuP2aNWuwceNGpKenw9DQEF9//TXCwsKgoaFRqfdT+vQm8psyZQpu376NvXv3ssuMjIxw4MAB/Prrr9DW1oauri7y8/PRpk0bdjwIwzCYMmUKjI2Nce7cOVy6dAkDBw5Ev3792EAFKBtL0rFjR7Ru3RqBgYGYPXs2wsPDK6xPWFgYdHV1JR6M+JXiDgAhhBDyORiGu8dn2rdvHwICAhASEoJr167ByckJnp6eePr0qczt9+zZgzlz5iAkJAT//PMPIiMjsW/fPsydO7fS78lrFt2cnByoqKigQYMGMDU1xXfffYdZs2YhNjYWHh4eEuNGAKBp06YYO3Ys5syRnRnw+PHj6Nu3L96+fSuVqA6gLLpEWKglRH7UEkL4ovAxIVGzOStLc8zKz9re1dUVbdu2xbp16wCU9WZYWFhg2rRpMq+7U6dOxT///IPY2Fh22XfffYeLFy8iISGhUu/JeUsIwzCYOnUqDh8+jLi4uI9m0TU0NESDBg0QFxeHp0+fon///gDKMuQCkMqSq6SkVGGGXABISkqCnp6ezAAEKMuiW79+fYkHBSCEEEJqo6KiIrx8+VLi8eEP8XLFxcW4evUqe+MHUHbNdXd3R2JioszXuLm54erVq7h06RIA4OHDh/j999/ZZLSVUe1ZdIGy22odHBxgZGSExMRE+Pn5wd/fn51LpEOHDtDT04O3tzcWLFgATU1NbNmyBampqejTpw8A4Ndff0V2djbat28PDQ0NnDp1CsuWLcPMmTO53iVSAaH/khf6r2Wh148QwgMOB6aGhYVh4cKFEstCQkIQGhoqtW1OTg5KS0sl5usCABMTE9y9e1dm+SNHjkROTg6+/PJLMAyDkpISTJo06bO6Y6o9iy4A3Lt3D0FBQcjLy4O1tTXmzZsHf39/dltDQ0PExMRg3rx56NatG969e4fmzZvj6NGjcHJyAgCoqqpi/fr18Pf3B8MwaNKkCSIiIjB+/Hiud4nUUEIPkoj8KIAjtRbDXRASFBSEgIAAiWUV9RTIIz4+HsuWLcOGDRvg6uqK5ORk+Pn5YfHixQgODq5UGZRFl+YJkZvQL/J0oSKEcE3hY0K2Bnx6o0rSHBdR6W2Li4tRr149HDx4UGLuLW9vb+Tn5+Po0aNSr/nqq6/Qvn17iRtCdu3ahQkTJqCgoEBqSIUslDuGEJ4IPYgTMgowSW3FiPlpF1BTU4OzszNiY2PZIEQsFiM2NhZTp06V+ZrXr19LBRrKysoAysaHVgYFIYQQQohQ8DhZWUBAALy9veHi4oJ27dphzZo1KCwsxJgxYwAAXl5eaNiwIcLCwgAA/fr1Q0REBFq3bs12x5SnYSkPRj6FghAiN/o1WjV0/AghQjJs2DA8e/YMCxYsQFZWFlq1aoWYmBh2sGp6erpEy8f8+fMhEokwf/58ZGRkwMjICP369cPSpZWfLp7zW3Q3btwIR0dH9hbYDh064I8//mDXd+nSBSKRSOIxadIkiTIuX76M7t27o0GDBtDT04Onpydu3LjBro+Pj8eAAQNgZmYGLS0ttGrVCrt37+Z6VwghhJDqxYi5e8hh6tSpePToEYqKinDx4kW4urqy6+Lj47F9+3b2uYqKCkJCQpCcnIw3b94gPT0d69ev/6xEspy3hDRq1AjLly9H06ZNwTAMoqOjMWDAAFy/fh3NmzcHAIwfPx6LFi1iX1OvXj323wUFBejZsyf69++PDRs2oKSkBCEhIfD09MS///4LVVVVXLhwAY6OjggMDISJiQl+++03eHl5QVdXF3379uV6l0gFhD6mgVoaCCE1Dk9jQvhSLXfH6OvrIzw8HGPHjkWXLl3QqlUrrFmzRua2V65cQdu2bZGeng4LCwsAwK1bt+Do6IgHDx6gSZMmMl/Xp08fmJiYYNu2bZ9VN7o7hvBF6EGckFGAKT/6u6saVUNbhZb/eu23nJVVb9oGzspSFIWOCSktLcWBAwdQWFiIDh06sMt3796NXbt2wdTUFP369UNwcDDbGmJnZwcDAwNERkZi7ty5KC0tRWRkJBwcHGBtbV3he7148QIODg6K3B3yAaF/mdGFihBp9LmoGkXfolvXKCQIuXXrFjp06IC3b99CW1sbhw8fRrNmzQCUzbBmZWUFc3Nz3Lx5E4GBgbh37x4OHToEANDR0UF8fDwGDhyIxYsXAyjLGXPixAmoqMiu7v79+3H58mX89NNPitgdUgH6MqsaOn6EECk83h3DB4UEIXZ2dkhKSsKLFy9w8OBBeHt748yZM2jWrBkmTJjAbteyZUuYmZmhe/fuSElJQePGjfHmzRuMHTsWHTt2xM8//4zS0lJ8//336NOnDy5fvsxO/V7uzz//xJgxY7BlyxZ2zElFZCWwYxiG8sfIiVpCqkbox0/IhH5uCZFbHZs/lPO7Y4CySU+aNGkCZ2dnhIWFwcnJCT/88IPMbctH3iYnJwMoSw2clpaGqKgotG3bFu3bt8eePXuQmpoqNWPbmTNn0K9fP6xevRpeXl6frFdYWBh0dXUlHoz4VRX3lhBCCCHyqJZ5QsRicYWZ+5KSkgAAZmZmAP6bge391ony5+9n0I2Pj0ffvn2xYsUKidaVj5E1j76egf3n7AohhNRo1AIncNQdUzVBQUHo1asXLC0t8erVK+zZswfx8fE4ceIEUlJSsGfPHvTu3RsGBga4efMm/P390alTJzg6OgIAevTogVmzZmHKlCmYNm0axGIxli9fDhUVFXTt2hVAWRdM37594efnh8GDB7OZetXU1KCvr19h3dTV1aWS91BXjPyoSbxq6PgRPtDfXdUofGBqHbtFl/Mg5OnTp/Dy8kJmZiZ0dXXh6OiIEydOoEePHvj3339x+vRpdipYCwsLDB48GPPnz2dfb29vj19//RULFy5Ehw4doKSkhNatWyMmJoZtLYmOjsbr168RFhbGTh8LAJ07d0Z8fDzXu0QqIPRfVEL/shX68RMyoZ9bQkjlUBZdmidEbkK/iAr9QiX04ydkQj+3pPZSdEvI63BfzsqqN+vz5s3iA+WOIYQndCElhEih7hhCSHWglhD5UQBXe9Hnom6hIITIjS4EhBDCLYbujiGEVAcK4giRJvTPBd0dwy2FTFb2vuXLl0MkEmHGjBnsss2bN6NLly6oX78+RCIR8vPzJV4THx8PkUgk83H58mV2u/3796NVq1aoV68erKysEB4erujdIYQQQhSHEXP3qAEU2hJSns+lfA6Qcq9fv0bPnj3Rs2dPBAUFSb3Ozc0NmZmZEsuCg4MRGxsLFxcXAMAff/yBUaNGYe3atfDw8MA///yD8ePHQ1NTE1OnTlXcThGW0Ptuhf6LSujHT8iEfm4JIZWjsCCkoKAAo0aNwpYtW7BkyRKJdeWtIhXN6aGmpgZTU1P2+bt373D06FFMmzaNnVxs586dGDhwICZNmgQAsLW1RVBQEFasWIEpU6bQJGRE8OhCSoi0Oh+c17HuGIUFIVOmTEGfPn3g7u4uFYR8rmPHjiE3NxdjxoxhlxUVFaFevXoS22lqauLx48d49OgRrK2tq/Se5NPoIkoI4ZrQv1cUPyakZnSjcEUhQcjevXtx7do1ifEbVREZGQlPT080atSIXebp6Ql/f3/4+Piga9euSE5OxqpVqwAAmZmZMoMQyqLLLaH/YhH6lxkhhNR1nA9M/ffff+Hn54fdu3dDQ0OjyuU9fvwYJ06cwNixYyWWjx8/HlOnTkXfvn2hpqaG9u3bY/jw4QDKEt7JQll0CSGECJqY4e5RA3A+bfuRI0fwv//9D8rKyuyy0tJSiEQiKCkpoaioiF0XHx+Prl274vnz52jQoIHM8hYvXoy1a9ciIyMDqqqqUutLS0uRlZUFIyMjxMbGonfv3nj69CmMjIyktpXVEqJnYE8tIXISeksIqb2E3spFn43aS9XQVqHlFwYP5awsrcX7OStLUTjvjunevTtu3bolsWzMmDGwt7dHYGCgRHDyKQzDICoqCl5eXjIDEABQVlZGw4Zl+V9+/vlndOjQQWYAAlAWXa4J/UJACF/os1F7KXxMSB3DeRCio6ODFi1aSCzT0tKCgYEBuzwrKwtZWVlITk4GANy6dQs6OjqwtLSEvr4++7q4uDikpqZi3LhxUu+Tk5ODgwcPokuXLnj79i2ioqJw4MABnDlzhutdIoQQQqpHDelG4YrCJyuTZdOmTWjdujXGjx8PAOjUqRNat26NY8eOSWwXGRkJNzc32NvbyywnOjoaLi4u6NixI/7++2/Ex8ejXbt2Cq8/IYQQogiMWMzZoybgfExITaOi1pDvKhBCCKkhFN0dUxA0mLOytMN+4awsRaHcMURuQh98R/3yhJAap451x1AQQmotoQdJRH4UYJJai4IQQiqHLgSEEMKxGpJ4jisKD0KWL1+OoKAg+Pn5Yc2aNUhLS4ONjY3Mbffv348hQ4Zg+/btElO0vy87OxvGxsYAyub9WLRoEXbt2oWsrCyYmZlhwYIF8PX1Vdj+kP8IvaVB6EGS0I+fkAn93BJCKqfas+haWFhIZcjdvHkzwsPD0atXLwDAsGHD0LNnT4ltfHx88PbtWzYAAYChQ4ciOzsbkZGRaNKkCTIzMyGuISOCCSGEDxT8Chx1x3Cjoiy6ysrKEhlyAeDw4cMYOnQotLW1AZQlotPU1GTXP3v2DHFxcYiMjGSXxcTE4MyZM3j48CE7twglrSOEkI+jVqSqUfTdMQwFIdyobBbdq1evIikpCevXr69wmx07dqBevXr4+uuv2WXHjh2Di4sLVq5ciZ07d0JLSwv9+/fH4sWLJQIYojj0ZVY1dPwIIXUd71l0IyMj4eDgADc3t49uM3LkSIng4uHDh0hISICGhgYOHz6MnJwcfPvtt8jNzUVUVJTMciiLLhESahaXHwVwpNaqYy0hvGbRffPmDfbs2SOVIfd9iYmJ+Oeff6S2EYvFEIlE2L17N9q1a4fevXsjIiIC0dHRePPmjcyyKIsuIYQQQROLuXvUALxm0d25cyfGjh2LjIyMCpPOjR07FteuXcP169cllnt7e+P8+fNs/hkA+Oeff9CsWTPcv38fTZs2lSqLsugSQgipCkWPCXk1tTdnZems+52zshSF1yy6kZGR6N+/f4UBSEFBAfbv34+wsDCpdR07dsSBAwdQUFDADmi9f/8+lJSU0KhRI5nlURZdbgm9O0HoTfZCP35CJvRzS4jc6lh3DC9ZdAEgOTkZZ8+exe+/Vxyp7du3DyUlJfjmm2+k1o0cORKLFy/GmDFjsHDhQuTk5GDWrFnw9fWlgamkRqALKSFESh0LQnjJogsA27ZtQ6NGjeDh4VHhNpGRkRg0aBAaNGggtU5bWxunTp1Cfn4+XFxcMGrUKPTr1w8//vijAmtNCCGEEK5QFl3KoksIIaSSFD0m5OVET87Kqv/TCc7KUhTKHUPkJvQxDULv7hD68RMyoZ9bQuRWx7pjKAghtRZd5AkhNQ4FIYRUDv0arRoKkggf6O+OCAnnQUhoaCgWLlwosczOzg53794FAEycOBGnT5/GkydPoK2tDTc3N6xYsQL29vYAUKkMugkJCQgMDMTdu3fx+vVrWFlZYeLEifD39+d6d8hHCP3LjIIkQqTR56JqKHcMtxTSEtK8eXOcPn36vzdR+e9tnJ2dMWrUKFhaWiIvLw+hoaHw8PBAamoqlJWVK5VBV0tLC1OnToWjoyO0tLSQkJCAiRMnQktLCxMmTFDELhFCSKUJPUAnAlbHghDO744JDQ3FkSNHkJSUVKntb968CScnJyQnJ6Nx48ZS6589e4aGDRsiMjISo0ePrrCcQYMGQUtLCzt37vys+tLdMYQQQipL0S0hL7y7c1aWbnQsZ2UpikJaQh48eABzc3NoaGigQ4cOCAsLg6WlpdR2hYWFiIqKgo2NDSwsLGSWJSuD7oeuX7+OCxcufDRbL+Ge0H/tCb3ZWejHT8iEfm4JkVvNSPnCGc6DEFdXV2zfvh12dnbIzMzEwoUL8dVXX+H27dvQ0dEBAGzYsAGzZ89GYWEh7OzscOrUKaipqcksT1YG3XKNGjXCs2fPUFJSgtDQUIwbN+6jdaMsutyiC0HV0PEjhHyoro0JUfhkZfn5+bCyskJERASbCffFixd4+vQpMjMz8f333yMjIwPnz5+XyrqbmJgINzc3XLlyBc7OzlJlp6amoqCgAH/99RfmzJmDdevWYcSIERXWRdagWZGSNpSU63Owp3WP0H/J00WeEMI1RXfH5I/qxllZDXbHcVaWolTLjKlt27aFu7u7zER0xcXF0NPTw9atW6UCiIoy6MqyZMkS7Ny5E/fu3atwG8qiyy2hByGk9qIAU370ua0aVUNbhZafP6IrZ2U1+PlPzspSFIXPE1JQUICUlJQKB5UyDAOGYaSCg49l0JVFLBZLlfEhyqLLLboQEFLz0Oe2ahTdEkJjQqpo5syZ6NevH6ysrPDkyROEhIRAWVkZI0aMwMOHD7Fv3z54eHjAyMgIjx8/xvLly6GpqYnevXtLlPOxDLrr16+HpaUlO7fI2bNn8f3332P69Olc7w75CKH/ohL6l63Qj5+QCf3cEkIqh/Mg5PHjxxgxYgRyc3NhZGSEL7/8En/99ReMjIzw7t07nDt3DmvWrMHz589hYmKCTp064cKFC+wcIOU+lkFXLBYjKCgIqampUFFRQePGjbFixQpMnDiR690hRGHoQkoI+RANTK1jaJ4Q+Qn9lzxd5AkhXFN0d8zzwV04K0vvl3jOylIUyh1D5EYXeUII4VZdawmhIITIjVpCqkbox0/IhH5uCSGVQ0EIqbXoIk8IqXHo7piq+VQW3ZSUFMycORMJCQkoKipCz549sXbtWpiYmAAA4uPj0bWr7PukL126hLZt2wIoyzkzZcoUXL58GUZGRpg2bRpmz57N9e6Qj6Bfo1VDQRIh5EMMBSFVV1EW3cLCQnh4eMDJyQlxcWUzuQUHB6Nfv37466+/oKSkBDc3N2RmZkqUFxwcjNjYWLi4uAAAXr58CQ8PD7i7u2PTpk24desWfH190aBBA8qiS2oMCuIIIXWdQoIQFRUVmJqaSi0/f/480tLScP36ddSvXzZVenR0NPT09BAXFwd3d3eoqalJvPbdu3c4evQopk2bxk4stnv3bhQXF2Pbtm1QU1ND8+bNkZSUhIiICApCqpHQf8nTRZ4QUuPUsZYQJUUUWp5F19bWFqNGjUJ6ejqAsmnTRSKRxKylGhoaUFJSQkJCgsyyjh07htzcXIwZM4ZdlpiYiE6dOkkkvfP09MS9e/fw/PlzRewSIYQQonCMmLtHTVCtWXTbt28PLS0tBAYGYtmyZWAYBnPmzEFpaalUF0y5yMhIeHp6olGjRuyyrKws2NjYSGxXPqYkKysLenp6MsuiLLpESITekiRk1MpFSO3AeRDSq1cv9t+Ojo5wdXWFlZUV9u/fj7Fjx+LAgQOYPHkyfvzxRygpKWHEiBFo06YNlJSkG2UeP36MEydOYP/+/ZzULSwsTGYWXRFl0ZULXQgIIYRjNaQFgysKv0W3QYMG+OKLL5CcnAwA8PDwQEpKCnJycqCiooIGDRrA1NQUtrbSmQmjoqJgYGCA/v37Syw3NTVFdna2xLLy57LGopQLCgpCQECAxDI9A3u59osQQipCrVxEXjWlG4UrvGXRNTQ0BADExcXh6dOnUoEGwzCIioqCl5cXVFVVJdZ16NAB8+bNw7t379h1p06dgp2dXYVdMQBl0SXCQi1JhBChWb9+PcLDw5GVlQUnJyesXbsW7dq1q3D7/Px8zJs3D4cOHUJeXh6srKywZs0aqaS0FanWLLpAWeuGg4MDjIyMkJiYCD8/P/j7+8POzk6inLi4OKSmpmLcuHFS7zFy5EgsXLgQY8eORWBgIG7fvo0ffvgBq1ev5np3yEcI/dee0C/yQj9+Qib0cyvk+tHfnbDx2RKyb98+BAQEYNOmTXB1dcWaNWvYmz4+TDILAMXFxejRoweMjY1x8OBBNGzYEI8ePZKZeLYi1ZpFFwDu3buHoKAg5OXlwdraGvPmzYO/v79UOZGRkXBzc4O9vXR3ia6uLk6ePIkpU6bA2dkZhoaGWLBgAd2eW82E/EVLCJGNPrdVo+gEdnwGIRERERg/fjx7N+qmTZtw/PhxbNu2DXPmzJHaftu2bcjLy8OFCxfYXglra+vPek/KoktZdOVGv6gIX+hCWnsJ/XtF1VB6/CKXsrt04aysBidOSN0RKmtYAlDWqlGvXj0cPHgQAwcOZJd7e3sjPz8fR48elXpN7969oa+vj3r16uHo0aMwMjLCyJEjERgYCGVl5UrVkXLHELnRhaBqhP5lSwgfhP69ouiWEC7JuiM0JCQEoaGhUtvm5OSgtLSUne6inImJCZt25UMPHz5EXFwcRo0ahd9//x3Jycn49ttv8e7dO4SEhFSqjhSEEMIToX/ZEkKqH5fdMbLuCJXVCiIvsVgMY2NjbN68GcrKynB2dkZGRgbCw8MpCCGEEEJqGkbM3R2bFXW9yGJoaAhlZWWZ019UNPWFmZkZVFVVJbpeHBwckJWVheLiYolZzStCQQiRG3UnEL4IvRWJPhukplFTU4OzszNiY2PZMSFisRixsbGYOnWqzNd07NgRe/bsgVgsZiccvX//PszMzCoVgAAKCkIyMjIQGBiIP/74A69fv0aTJk0QFRXFZsH18fFBdHS0xGs8PT0RExMjsez48eNYtGgRbt68CQ0NDXTu3BlHjhwBAGzfvl0in8z7srOzZd5ORAgh1UHoQRKRX22+OyYgIADe3t5wcXFBu3btsGbNGhQWFrLXWi8vLzRs2BBhYWEAgMmTJ2PdunXw8/PDtGnT8ODBAyxbtgzTp0+v9HtyHoQ8f/4cHTt2RNeuXfHHH3/AyMgIDx48kJpErGfPnoiKimKff9hk9Msvv2D8+PFYtmwZunXrhpKSEty+fZtdP2zYMPTs2VPiNT4+Pnj79m2tCkDoF5X8hH4hoHNLCPkQw/A3geawYcPw7NkzLFiwAFlZWWjVqhViYmLYwarp6ekSKVYsLCxw4sQJ+Pv7w9HREQ0bNoSfnx8CAwMr/Z6c36I7Z84cnD9/HufOVfwF6+Pjg/z8fLZV40MlJSWwtrZmJySrjGfPnqFhw4aIjIyUmp31Y+gWXUIIIZWl6JaQjA7dOCurYWIcZ2UpCuctIceOHYOnpyeGDBmCM2fOoGHDhvj2228xfvx4ie3i4+NhbGwMPT09dOvWDUuWLIGBgQEA4Nq1a8jIyICSkhJat27NRmTh4eFo0aKFzPfdsWMH6tWrh6+//prrXeIV/VqWH7WE1F5CP7dEfnX9c0G5Y6ro4cOH2LhxIwICAjB37lxcvnwZ06dPh5qaGry9vQGUdcUMGjQINjY2SElJwdy5c9GrVy8kJiZCWVkZDx8+BACEhoYiIiIC1tbWWLVqFbp06YL79+9DX19f6n0jIyMxcuRIaGpqVli3oqIiqYlbGIYRdP4YIX/Z1vUvC0II94T8nQdUx5gQ4V6PFIHzIEQsFsPFxQXLli0DALRu3Rq3b9/Gpk2b2CBk+PDh7PYtW7aEo6MjGjdujPj4eHTv3h1icVkoOG/ePAwePBhAWc6ZRo0a4cCBA5g4caLEeyYmJuKff/7Bzp07P1o3WRO3iJS0IVKuX7WdJoSQGoJ+PBAh4TwIMTMzQ7NmzSSWOTg44JdffqnwNba2tjA0NERycjK6d+8OMzMzAJAoR11dHba2tkhPT5d6/datW9GqVSs4Ozt/tG6yJm7RM5DOTUMqR+i/WISOjh/hA/3dVY3CW0LqWCIVzoOQjh074t69exLL7t+/Dysrqwpf8/jxY+Tm5rLBh7OzM9TV1XHv3j18+eWXAIB3794hLS1NqpyCggLs37+fvWXoY2RN3CLkrhiho19UhC90ISW1FXXHVJG/vz/c3NywbNkyDB06FJcuXcLmzZuxefNmAGVBw8KFCzF48GCYmpoiJSUFs2fPRpMmTeDp6QkAqF+/PiZNmoSQkBBYWFjAysoK4eHhAIAhQ4ZIvN++fftQUlKCb775hutdITWc0C9UFMQRQj5EQUgVtW3bFocPH0ZQUBAWLVoEGxsbrFmzBqNGjQIAKCsr4+bNm4iOjkZ+fj7Mzc3h4eGBxYsXS7RShIeHQ0VFBaNHj8abN2/g6uqKuLg4qflGIiMjMWjQIDRo0IDrXSE1HF3kCSFE2DifJ6SmoXlCCCGEVJaix4SkOvXgrCybG6c4K0tRKHcMIYQQIhDUHUMIqRbUXSQ/Gu9DSO1AQQghPBH6hZTIj85t7aX4W3SpJaRKrK2t8ejRI6nl3377LdavX4/Nmzdjz549uHbtGl69eoXnz5/LHFT6sQy678vNzYWTkxMyMjIqLIsohtB/7Qn9QiD040cIqX40bXsVXb58GaWlpezz27dvo0ePHuytta9fv0bPnj3Rs2dPBAUFySzjUxl03zd27Fg4OjoiI0Ox0SmRJvSLvNDR8SOk5lF0S0hdw3kQYmRkJPF8+fLlaNy4MTp37gwAmDFjBoCyBHaylJSUwM/PD+Hh4RIZdD+chRUANm7ciPz8fCxYsAB//PEHNztAKk3ov+TpIk8IqWnE1B3DneLiYuzatQsBAQGVnpm0shl079y5g0WLFuHixYtswjtCahKhB3FCRgFm7VXXPxc0JoRDR44cQX5+Pnx8fCr9mspk0C0qKsKIESMQHh4OS0vLSgchNTGLrpDRhaBq6PgRIk3onwvqjuGWQoOQyMhI9OrVC+bm5pV+TWUy6AYFBcHBweGzp2qnLLrcEvovFqF/mQn9+BFCql9dmydESVEFP3r0CKdPn8a4ceM+63WVyaAbFxeHAwcOQEVFBSoqKujevTsAwNDQECEhIRWWHRQUhBcvXkg8REo6n7trhBBCiEIwDHePmkBhLSFRUVEwNjZGnz59Put1lcmg+8svv+DNmzfsay5fvgxfX1+cO3cOjRs3rrBsyqJbt1BLQ+0l9FYuUnspfJ6QOtYSopAgRCwWIyoqCt7e3lBRkXyLrKwsZGVlITk5GQBw69Yt6OjowNLSEvr6+pXKoPthoJGTkwMAcHBwoHlCqhFdCAghhFSFQoKQ06dPIz09Hb6+vlLrNm3aJDEuo1OnTgDKWk7KB7BWNoMu4ZfQWxqEHiQJ/fgJmdDPLSHyqmu36FIWXcqiSwghgiH04FzV0Fah5d+y6cdZWS1Tf+WsLEWh3DECJ/QPJCF8oJaQ2kvo55Zu0eUWBSECJ/QPJCGEEO7Utb4JCkIIIYQQgahrY0I4nyfE2toaIpFI6jFlyhSkpaXJXCcSiXDgwAGJcrZv3w5HR0doaGjA2NgYU6ZMYde9ffsWPj4+aNmyJVRUVDBw4ECud4MQQgghClatWXQtLCyQmZkpsf3mzZsRHh6OXr16scsiIiKwatUqhIeHw9XVFYWFhUhLS2PXl5aWQlNTE9OnT8cvv/zC9S6QShL6eBWhd2UJ/fgJmdDPLSHyotwxVfSxLLoikQimpqYS6w8fPoyhQ4dCW1sbAPD8+XPMnz8fv/76KzsTKgA4Ojqy/9bS0sLGjRsBAOfPn0d+fj7Xu0EIIYRUOxoTwqFPZdG9evUqkpKSsH79enbZqVOnIBaLkZGRAQcHB7x69Qpubm5YtWoVLCwsFFldQkgNQa1IhNQOvGbRjYyMhIODA9zc3NhlDx8+hFgsxrJly/DDDz9AV1cX8+fPR48ePXDz5k2oqanJXR/KoktI7UDdMYQvir5Ft64NTOUti+6bN2+wZ88eBAcHSywXi8V49+4dfvzxR3h4eAAAfv75Z5iamuLPP/+Ep6en3PWhLLrcogtB1dDxI4R8iMaEcKQ8i+6hQ4dkrj948CBev34NLy8vieWysugaGRnB0NCQzaIrr6CgIAQEBEgs0zOwr1KZdZnQm8SFfpEX+vETMqGfW0LkRS0hHPlUFt3IyEj0799faiBrx44dAQD37t1Do0aNAAB5eXnIyclhs+jKi7LoEkIIIcJR7Vl0ASA5ORlnz57F77//LrXuiy++wIABA+Dn54fNmzejfv36CAoKgr29Pbp27cpud+fOHRQXFyMvLw+vXr1CUlISAKBVq1aK2CVCCKk0auUi8qpjN8dUfxZdANi2bRsaNWrEjvn40I4dO+Dv748+ffpASUkJnTt3RkxMDFRVVdltevfujUePHrHPW7duDaBsoCkhpHajizyprepadwxl0aUsuoQndCGVH40JIXxR9N0xF8wGc1aWW6bwJ/Ok3DFEbkK/iNKFqvYS+t8eIfKiu2MIqSXoQlV7UYBZe9X1z62Y7wpUMwpCSK0l9AtVXf+yJUQWoX9uFd0dU9dwnkW3tLQUwcHBsLGxgaamJho3bozFixdLDBgNDQ2Fvb09tLS0oKenB3d3d1y8eFGiHFnZeJcvXy6xzYkTJ9C+fXvo6OjAyMgIgwcPlkh0RwghhNQkDEScPWoCzltCVqxYgY0bNyI6OhrNmzfHlStXMGbMGOjq6mL69OkAym7DXbduHWxtbfHmzRusXr0aHh4eSE5Olpg3ZNGiRRg/fjz7XEdHh/13amoqBgwYgICAAOzevRsvXryAv78/Bg0ahGvXrnG9W0QGof9iETo6foSQD4nr2K0inAchFy5cwIABA9hJyqytrfHzzz/j0qVL7DYjR46UeE1ERAQiIyNx8+ZNicy5Ojo6Ull3y129ehWlpaVYsmQJlJTKGnRmzpyJAQMG4N27dxK38xLFEHp3gtAv8kI/fkJG55aQ2oHzIMTNzQ2bN2/G/fv38cUXX+DGjRtISEhARESEzO2Li4uxefNm6OrqwsnJSWLd8uXLsXjxYlhaWmLkyJHw9/dnJz9zdnaGkpISoqKi4OPjg4KCAuzcuRPu7u4UgFQToV8IhI6OX+1F57b2UngCuxrSjcIVzoOQOXPm4OXLl7C3t4eysjJKS0uxdOlSjBo1SmK73377DcOHD8fr169hZmaGU6dOwdDQkF0/ffp0tGnTBvr6+rhw4QKCgoKQmZnJBjM2NjY4efIkhg4diokTJ6K0tBQdOnSQOQtrOcqiSwghRMhqylgOrnA+WdnevXsxa9YshIeHo3nz5khKSsKMGTMQEREBb29vdrvCwkJkZmYiJycHW7ZsQVxcHC5evAhjY2OZ5W7btg0TJ05EQUEB1NXVkZWVhU6dOmHgwIEYMWIEXr16hQULFkBFRQWnTp2SGViEhobKzKKrRFl0CSGEVIKiW0JOmQzjrKwe2fs4K0tROA9CLCwsMGfOHEyZMoVdtmTJEuzatQt3796t8HVNmzaFr68vgoKCZK7/+++/0aJFC9y9exd2dnYIDg5GTEwMLl++zG7z+PFjWFhYIDExEe3bt5cqQ1ZLiJ6BPbWEEF7QuAH5UXcH4QsFIdzivDvm9evX7EDRcsrKyhCLPz4Fi1gslgoQ3peUlAQlJSW2paSi9ykvSxbKokuEhC6khJAP1bXuGM6DkH79+mHp0qWwtLRE8+bNcf36dURERLDJ7AoLC7F06VL0798fZmZmyMnJwfr165GRkYEhQ4YAABITE3Hx4kV07doVOjo6SExMhL+/P7755hvo6ekBAPr06YPVq1dj0aJFbHfM3LlzYWVlxSazI4ol9F/yQr/IC/34CZnQzy0h8qIZU6to7dq1CA4OxrfffounT5/C3NwcEydOxIIFCwCUtVbcvXsX0dHRyMnJgYGBAdq2bYtz586hefPmAMpaLPbu3YvQ0FAUFRXBxsYG/v7+CAgIYN+nW7du2LNnD1auXImVK1eiXr166NChA2JiYqCpqcn1bhEZ6EJAiGwUYBJSOZRFl7Loyk3oX7RCD5KEfvyETOjnlshP6J8LVUNbhZb/u8lwzsrqnb2Xs7IUhXLHELnRhaBq6PgRIk3onwtFD0ylMSGEVJLQf7EI/cuMEELqOgpCCCGEEIEQ162GEO6DkNLSUoSGhmLXrl3IysqCubk5fHx8MH/+fPZ22OzsbAQGBuLkyZPIz89Hp06dsHbtWjRt2pQtp0uXLjhz5oxE2RMnTsSmTZvY57Jur/35558xfDh3fWqkYtTSQAgh3KJp26voU1l0GYbBwIEDoaqqiqNHj6J+/fqIiIiAu7s77ty5Ay0tLbas8ePHY9GiRezzevXqSb1fVFQUevbsyT5v0KAB17tEiEIIvTtLyCgAJqR2qPYsug8ePMBff/2F27dvs7fkbty4Eaampvj5558xbtw4tqx69epVmEW3XIMGDT65DSFCRBdSQsiH6trtqkqf3uTzuLm5ITY2Fvfv3wcANotur169AICdFVVDQ+O/SigpQV1dHQkJCRJl7d69G4aGhmjRogWCgoLw+vVrqfebMmUKDA0N0a5dO2zbtg11/I5jQgghNZiYw0dNUO1ZdO3t7WFpaYmgoCD89NNP0NLSwurVq/H48WNkZmay5YwcORJWVlYwNzfHzZs3ERgYiHv37uHQoUPsNosWLUK3bt1Qr149nDx5Et9++y0KCgowffp0rneLyCD07gRqaSCE1DTiOpZKhPMgZP/+/di9ezf27NkjkUXX3Nwc3t7eUFVVxaFDhzB27Fjo6+tDWVkZ7u7u6NWrl0QrxoQJE9h/t2zZEmZmZujevTtSUlLQuHFjAEBwcDC7TevWrVFYWIjw8PAKgxBZCewYhqH8MXKiizwhhJCq4Lw7ZtasWZgzZw6GDx+Oli1bYvTo0fD390dYWBi7jbOzM5KSkpCfn4/MzEzExMQgNzcXtrYVz0Tn6uoKAEhOTv7oNo8fP64wEV5YWBh0dXUlHoz4lZx7SgghhHCL4fBRE/CaRVdXVxdA2WDVK1euYPHixRWWm5SUBAAwMzP76DZ6enpSmXLLBQUFSeSfAQA9A/sKyyM1G3UXEUJqmpoyloMr1Z5FFwAOHDgAIyMjWFpa4tatW/Dz88PAgQPh4eEBAEhJScGePXvQu3dvGBgY4ObNm/D390enTp3g6OgIAPj111+RnZ2N9u3bQ0NDA6dOncKyZcswc+bMCuumrq4uFaBQV4z86CJfNUI/fkIm9HNLCKmcas+iCwCZmZkICAhAdnY2zMzM4OXlJTG+Q01NDadPn8aaNWtQWFgICwsLDB48GPPnz2e3UVVVxfr16+Hv7w+GYdCkSRNERERg/PjxXO8Sr+hCRQghdUddmzGVsuhSFl25UYBE+EItIbWX0L9XFJ1Fd7f5N5yVNerJrs9+zfr16xEeHo6srCw4OTlh7dq1aNeu3Sdft3fvXowYMQIDBgzAkSNHKv1+lDuG1FpCv1AJ/cuW1E70d0cqsm/fPgQEBGDTpk1wdXXFmjVr4OnpiXv37sHY2LjC16WlpWHmzJn46qvP/86llhBqCZGb0L/MhB6EEEJqnpLiDIWWv4vDlpBvPrMlxNXVFW3btsW6desAAGKxGBYWFpg2bRrmzJkj8zWlpaXo1KkTfH19ce7cOeTn539WSwjnt+gSQgghRD5iEXePoqIivHz5UuJR0RQWxcXFuHr1Ktzd3dllSkpKcHd3R2JiYoX1XbRoEYyNjTF27Fi59pe6Y4jcqKWBEEKEKywsDAsXLpRYFhISgtDQUKltc3JyUFpaChMTE4nlJiYmuHv3rszyExISEBkZyU6hIQ+FBCGvXr1CcHAwDh8+jKdPn6J169b44Ycf0LZtWwCAj48PoqOjJV7j6emJmJgY9rm1tTUePXoksU1YWBjbJBQfH4/Vq1fj0qVLePnyJZo2bYpZs2ax08MTxaPumKoR+vETMqGfWyK/uv654HKeEFlzY1U0j9bnevXqFUaPHo0tW7bA0NBQ7nIUEoSMGzcOt2/fxs6dO2Fubo5du3bB3d0dd+7cQcOGZWMwevbsiaioKPY1sg7MokWLJG651dHRYf994cIFODo6IjAwECYmJvjtt9/g5eUFXV1d9O3bVxG7RT5AF4KqoeNHiDShfy4UPSaEy0GasubGqoihoSGUlZWRnZ0tsTw7O1tmpvqUlBSkpaWhX79+7LLySUlVVFRw7949NsXKx3AehLx58wa//PILjh49ik6dOgEAQkND8euvv2Ljxo1YsmQJgLKDI2vH3qejo1PhNnPnzpV47ufnh5MnT+LQoUMUhFQTof9iEfqXGSGEfIiveULU1NTg7OyM2NhYDBw4sKwuYjFiY2MxdepUqe3t7e1x69YtiWXz58/Hq1ev8MMPP8DCwqJS78t5EFJSUoLS0lJoaGhILNfU1ERCQgL7PD4+HsbGxtDT00O3bt2wZMkSGBgYSLxm+fLlWLx4MSwtLTFy5Ej4+/tDRaXiKr948QIODg7c7hCpEF3kq0boQZyQ0d8eIdwLCAiAt7c3XFxc0K5dO3bC0DFjxgAAvLy80LBhQ4SFhUFDQwMtWrSQeH2DBg0AQGr5x3AehOjo6KBDhw5YvHgxHBwcYGJigp9//hmJiYlo0qQJgLKumEGDBsHGxgYpKSmYO3cuevXqhcTERCgrKwMApk+fjjZt2kBfXx8XLlxAUFAQMjMzERERIfN99+/fj8uXL+Onn36qsG6URZdbQr+ICv1CJfT6EUKqH5+5Y4YNG4Znz55hwYIFyMrKQqtWrRATE8MOVk1PT5fKDVdVCpknJCUlBb6+vjh79iyUlZXRpk0bfPHFF7h69Sr++ecfqe0fPnyIxo0b4/Tp0+jevbvMMrdt24aJEyeioKBAqo/rzz//RN++fbFx40Z4eXlVWK/Q0FCpkcIiJW0oKdeXYy8JIYTUNYoeE/JTI+7mCZn4+PNnTK1uChmY2rhxY5w5cwaFhYV4+fIlzMzMMGzYMNjayp7u1tbWFoaGhkhOTq4wCHF1dUVJSQnS0tJgZ2fHLj9z5gz69euH1atXfzQAASiLLteoJaRqhH78hEzo55bIjz4XdYtC5wnR0tKClpYWnj9/jhMnTmDlypUyt3v8+DFyc3NhZmZWYVlJSUlQUlKSmDo2Pj4effv2xYoVKzBhwoRP1oey6BJCiLAJPcBU+N0xdeySpJAg5MSJE2AYBnZ2dkhOTsasWbNgb2+PMWPGoKCgAAsXLsTgwYNhamqKlJQUzJ49G02aNIGnpycAIDExERcvXkTXrl2ho6ODxMRE+Pv745tvvoGenh6A/7pg/Pz8MHjwYGRlZQEoG+Grr6+viN3iBf0qIKTmoc8tkRefY0L4oJAg5MWLFwgKCsLjx4+hr6+PwYMHY+nSpVBVVUVJSQlu3ryJ6Oho5Ofnw9zcHB4eHli8eDHbSqGuro69e/ciNDQURUVFsLGxgb+/v0RXSnR0NF6/fo2wsDCEhYWxyzt37oz4+HhF7BYvhPyrgL5oCV/ob4+Q2oES2FECO7kJ/UIg5ACOEFIzKbo7Zp0FdwNTp/5bRwemEkI+TehBnJBRgElqq7rWKkBBCJEbXQgIIYRUBQUhRG5C/yVPQRLhi9A/G0S4+Jq2nS+fHYScPXsW4eHhuHr1KjIzM3H48GF2nnmgbAbSkJAQbNmyBfn5+ejYsSM2btyIpk2bstssXboUx48fR1JSEtTU1JCfn1/h++Xm5sLJyQkZGRl4/vw5Oy0sAKxfvx7r1q1DWloaLC0tMW/evE/OFULqDroQEL4IOQCmz4Ww0d0xn1BYWAgnJyf4+vpi0KBBUutXrlyJH3/8EdHR0bCxsUFwcDA8PT1x584dNp9McXExhgwZgg4dOiAyMvKj7zd27Fg4OjoiI0NyMNDGjRsRFBSELVu2oG3btrh06RLGjx8PPT09iax+RHGE/EVLCJGNPrdVo+iBqRSEfEKvXr3Qq1cvmesYhsGaNWswf/58DBgwAACwY8cOmJiY4MiRIxg+fDgAsFOnb9++/aPvtXHjRuTn52PBggX4448/JNbt3LkTEydOxLBhwwCUzbp6+fJlrFixgoIQQgghpAbgdExIamoqsrKy4O7uzi7T1dWFq6srEhMT2SCkMu7cuYNFixbh4sWLePjwodT6oqIimZl6L126hHfv3kFVVVX+HSGVIvRmXaH/4hP68RMyOrektqK7Y6qgfNbS8ox75UxMTNh1lVFUVIQRI0YgPDwclpaWMoMQT09PbN26FQMHDkSbNm1w9epVbN26Fe/evUNOTo7MKeApiy4hpDoIPUgi8lN4d0wduxwJ8u6YoKAgODg44JtvKp60JTg4GFlZWWjfvj0YhoGJiQm8vb2xcuXKClMNh4WFycyiK6IsunKhL9qqoeNHCKnrZF+t5WRqagoAyM7OllienZ3NrquMuLg4HDhwACoqKlBRUWEz6xoaGiIkJARAWdfLtm3b8Pr1a6SlpSE9PR3W1tbQ0dGBkZGRzHKDgoLw4sULiYdISUeeXSWEEEI4J+bwURNw2hJiY2MDU1NTxMbGolWrVgCAly9f4uLFi5g8eXKly/nll1/w5s0b9vnly5fh6+uLc+fOoXHjxhLbqqqqolGjRgCAvXv3om/fvhW2hFAWXW4Jvd9b6C0NQj9+Qib0c0uIvGhMyCcUFBQgOTmZfZ6amoqkpCTo6+vD0tISM2bMwJIlS9C0aVP2Fl1zc3OJuUTS09ORl5eH9PR0lJaWIikpCQDQpEkTaGtrSwUaOTk5AAAHBwd2npD79+/j0qVLcHV1xfPnzxEREYHbt28jOjr6c3eJyIkuBITIRgEmIZXz2UHIlStX0LVrV/Z5eWZbb29vbN++HbNnz0ZhYSEmTJiA/Px8fPnll4iJiZG4k2XBggUSwULr1q0BAH/++Se6dOlSqXqUlpZi1apVuHfvHlRVVdG1a1dcuHAB1tbWn7tLhPCCgrjai85t7aX4eULqVlsIZdGlLLpyE/qvPaFfCIR+/IRM6OeW1F6KDkIWW43irKzgR7s5K0tRBHl3DCF1AV1ICSF1HQUhRG50ESWEEG7Vta4JCkIIIYQQgagpt9Zypdqz6MbHx0sMbH3fpUuX0LZtW4llycnJaN26NZSVlaWy7ebn52PevHk4dOgQ8vLyYGVlhTVr1qB3796fu1uCReMG5Cf0lho6t/Kjc0tqK5ox9ROqmkXXzc0NmZmZEq8JDg5GbGwsXFxcJJa/e/cOI0aMwFdffYULFy5IrCsuLkaPHj1gbGyMgwcPomHDhnj06BF7C29tIeQvW/qirRohn1tSNXRuay9FD0yta6o9i66amprE7Knv3r3D0aNHMW3aNKmJw+bPnw97e3t0795dKgjZtm0b8vLycOHCBTZZXW28PZcu9LUXnVv5Cf0iT+eWyKuu3aLLexbdY8eOITc3F2PGjJFYXj51e1JSEg4dOiTzdR06dMCUKVNw9OhRGBkZYeTIkQgMDISysjKXu8UrIX/ZCv2LVuj1I7UXfW6JvOpWCCKALLqRkZHw9PRkp14HgNzcXPj4+GDXrl2oX192crmHDx8iLi4Oo0aNwu+//47k5GR8++23ePfuHZtf5kOURZdbQv6iJYTIRp/bqqHuGG7xenfM48ePceLECezfv19i+fjx4zFy5Eh06tSpwteKxWIYGxtj8+bNUFZWhrOzMzIyMhAeHl5hEFITs+jSrxb5Cf3Lls6t/IR+boWM/u6Eje6OqYL3s+iamZmxy7Ozs9mEdu+LioqCgYEB+vfvL7E8Li4Ox44dw/fffw+grLVCLBZDRUUFmzdvhq+vL8zMzKCqqirR9eLg4ICsrCwUFxdDTU1N6v2CgoLYaebL6RnYy72/1UHIX7b0ZUaIbPTZIPKiMSFV8DlZdBmGQVRUFLy8vNiBpeUSExNRWlrKPj969ChWrFiBCxcuoGHDsmnWO3bsiD179kAsFrNZc+/fvw8zMzOZAQhAWXS5JuQAqSag41d70bmtvag7hlu8ZNEFylo7UlNTMW7cOKn3cHBwkHh+5coVKCkpoUWLFuyyyZMnY926dfDz88O0adPw4MEDLFu2DNOnT//cXSKEEEIEoW61g/CURRcoG5Dq5uYGe3v5ukMsLCxw4sQJ+Pv7w9HREQ0bNoSfnx8CAwPlKo98PqE3OQv916jQjx8hpPrVtTEhlEWXsugSQgipJEV3xwRYS09lIa+ItL2claUolDuGyI1+yRO+CL2VixBSORSEkFpL6BcqCuIIIR+qa10TFIQQQgghAlHXxoRwnkX30KFD2LRpE65evYq8vDxcv35dao6QiRMn4vTp03jy5Am0tbXh5uaGFStWyBykmpubCycnJ2RkZOD58+dsgrqEhAQEBgbi7t27eP36NaysrDBx4kT4+/t/7i6RWopaGgiRRp8LIiScZ9EtLCzEl19+iaFDh2L8+PEyy3B2dsaoUaNgaWmJvLw8hIaGwsPDA6mpqVJ5X8aOHQtHR0dkZEgOBtLS0sLUqVPh6OgILS0tJCQkYOLEidDS0sKECRM+d7eIHITe3UEIkUaf26pR9MBUpo51yFTp7hiRSCTVElIuLS0NNjY2MltCPnTz5k04OTkhOTkZjRs3Zpdv3LgR+/btw4IFC9C9e3eJlhBZBg0aBC0tLezcubPS+0B3x8iPflERvtCFlPBF0UHIVOthnJW1Lm0fZ2UpCu9jQgoLCxEVFQUbGxtYWFiwy+/cuYNFixbh4sWLePjw4SfLuX79Oi5cuIAlS5YosrqkBhH6hYqCOEKk0eeibuEtCNmwYQM7sZmdnR1OnTrFTrdeVFSEESNGIDw8HJaWlh8NQho1aoRnz56hpKQEoaGhMmdgJXUTfZkRvtDfHpEX5Y6pJqNGjUKPHj2QmZmJ77//HkOHDsX58+ehoaGBoKAgODg44JtvvvlkOefOnUNBQQH++usvzJkzB02aNMGIESNkbltUVISioiKJZQzDUP4YOQm9pYEQvtBno/ZS/JiQukWJrzfW1dVF06ZN0alTJxw8eBB3797F4cOHAZTllTlw4ABUVFSgoqKC7t27AwAMDQ0REhIiUY6NjQ1atmyJ8ePHw9/fH6GhoRW+Z1hYGHR1dSUejPiVwvaREEIIIRXjfUwIUNYawTAM20rxyy+/4M2bN+z6y5cvw9fXF+fOnZMYuPohsVgs1dLxvqCgIDbXTTk9A/ly1xDhNzkL/deo0I+fkAn93BIiL+qO+YRPZdHNy8tDeno6njx5AgC4d+8eAMDU1BSmpqZ4+PAh9u3bBw8PDxgZGeHx48dYvnw5NDU10bt3bwCQCjRycnIAlGXXLb87Zv369bC0tGTnFjl79iy+//77j2bRVVdXh7q6usQy6oohhBAiFDRZ2Sd8KovusWPHMGbMGHb98OFlyXhCQkIQGhoKDQ0NnDt3DmvWrMHz589hYmKCTp064cKFCzA2Nq50PcRiMYKCgpCamgoVFRU0btwYK1aswMSJEz93l4ic6Ndo1dDxI4R8iOYJqWNonhBCCCGVpeiBqeOsv+asrK1pBzkrS1EEMSaEEEIIIdQdQ0ilCX1gJXV3EEJqmrrWHUNBCJEbXeQJIYRUBQUhRG7UEkIIIdyi7phPOHv2LMLDw3H16lVkZmZKJbA7dOgQNm3ahKtXryIvL09mAruUlBTMnDkTCQkJKCoqQs+ePbF27VqYmJhIvV9RURFcXV1x48YNqbJu3ryJKVOm4PLlyzAyMsK0adMwe/bsz90lIie6yBNCCLfEdexekc8OQgoLC+Hk5ARfX18MGjRI5vovv/wSQ4cOxfjx42Wu9/DwgJOTE+Li4gAAwcHB6NevH/766y8oKUlO4jp79myYm5vjxo0bEstfvnwJDw8PuLu7Y9OmTbh16xZ8fX3RoEEDTJgw4XN3i8iBWkKqRujHT8iEfm4JIZXz2UFIr1690KtXrwrXjx49GgCQlpYmc/358+eRlpaG69evo379+gCA6Oho6OnpIS4uDu7u7uy2f/zxB06ePIlffvkFf/zxh0Q5u3fvRnFxMbZt2wY1NTU0b94cSUlJiIiIoCCkmtCFoGro+BFCPlS32kF4GBNSVFQEkUgkMXOphoYGlJSUkJCQwAYh2dnZGD9+PI4cOYJ69epJlZOYmIhOnTqxmXcBwNPTEytWrMDz58+hp6en+J0hpAqoJUR+FMCR2oqmbVew9u3bQ0tLC4GBgVi2bBkYhsGcOXNQWlqKzMxMAGW5ZHx8fDBp0iS4uLjIbFXJysqCjY2NxLLyMSVZWVkygxDKosstoV9E6UJF+CL0zwYhQlHtQYiRkREOHDiAyZMn48cff4SSkhJGjBiBNm3asONB1q5di1evXiEoKIjT9w4LC8PChQsllomUtCFSrs/p+xBC6jYKgGsvRc+YSvOEVAMPDw+kpKQgJycHKioqaNCgAUxNTWFrawsAiIuLQ2JiolSyORcXF4waNQrR0dEwNTVFdna2xPry56ampjLfl7LoEiGhCxUh5EN0i241MjQ0BFAWdDx9+hT9+/cHAPz4449YsmQJu92TJ0/g6emJffv2wdXVFQDQoUMHzJs3D+/evYOqqioA4NSpU7Czs6twPAhl0SWEECJkNCbkEwoKCpCcnMw+T01NRVJSEvT19WFpaYm8vDykp6fjyZMnAIB79+4BKGudKG+hiIqKgoODA4yMjJCYmAg/Pz/4+/vDzs4OAGBpaSnxntra2gCAxo0bo1GjRgCAkSNHYuHChRg7diwCAwNx+/Zt/PDDD1i9evXn7hKRE/2SJ4QQUhWfHYRcuXIFXbt2ZZ+Xd294e3tj+/btOHbsGMaMGcOuHz58OAAgJCQEoaGhAMoCk6CgIOTl5cHa2hrz5s2Dv7//Z9VDV1cXJ0+exJQpU+Ds7AxDQ0MsWLCAbs8lhBBSY9W1MSEihqlj07N9QEWtId9VIIQQUkMoemDqIKv+nJV16NExzspSFModQ+RGtyESvlBXICG1AwUhpNYS+oWKgjhCyIf47pxYv349wsPDkZWVBScnJ6xduxbt2rWTue2WLVuwY8cO3L59GwDg7OyMZcuWVbi9LBSEELkJ/SIvdHT8CCEf4vPumH379iEgIACbNm2Cq6sr1qxZA09PT9y7dw/GxsZS28fHx2PEiBFwc3ODhoYGVqxYAQ8PD/z9999o2LByQx2UPr2JpLNnz6Jfv34wNzeHSCTCkSNH2HXv3r1DYGAgWrZsCS0tLZibm8PLy4u9U6actbU1RCKRxGP58uXs+nv37qFr164wMTGBhoYGbG1tMX/+fLx7947dpkuXLlJliEQi9OnT53N3iRBCCKnzIiIiMH78eIwZMwbNmjXDpk2bUK9ePWzbtk3m9rt378a3336LVq1awd7eHlu3boVYLEZsbGyl35PTLLqvX7/GtWvXEBwcDCcnJzx//hx+fn7o378/rly5IrHtokWLJLLs6ujosP9WVVWFl5cX2rRpgwYNGuDGjRsYP348xGIxli1bBgA4dOgQiouL2dfk5ubCyckJQ4YM+dxdInISencCtTQQIk3on9u6jsvJymSlKpE1XxYAFBcX4+rVqxIzlSspKcHd3R2JiYmVer/Xr1/j3bt30NfXr3QdOc2iq6uri1OnTkksW7duHdq1a4f09HSJ+T90dHQqnNnU1taWnT0VAKysrBAfH49z5/778Hy4k3v37kW9evUoCKlGdJEnpOahz23V1KRp22WlKnl/uoz35eTkoLS0lM3BVs7ExAR3796t1PsFBgbC3NycTURbGZ/dHfO5Xrx4AZFIhAYNGkgsX758OQwMDNC6dWuEh4ejpKSkwjKSk5MRExODzp07V7hNZGQkhg8fDi0tLa6qTgghhNRYQUFBePHihcSD65xs5ZYvX469e/fi8OHD0NDQqPTrFDow9e3btwgMDMSIESNQv/5/SeKmT5+ONm3aQF9fHxcuXEBQUBAyMzMREREh8Xo3Nzdcu3YNRUVFmDBhAhYtWiTzfS5duoTbt28jMjLyo/WhLLrcEnqzrtB/8Qn9+AmZ0M+tkNHfnbBxOTC1oq4XWQwNDaGsrCwzJ1tFvRblvv/+eyxfvhynT5+Go6PjZ9VRYUHIu3fvMHToUDAMg40bN0qsez+JnKOjI9TU1DBx4kSEhYVJHLB9+/bh1atXuHHjBmbNmoXvv/8es2fPlnqvyMhItGzZ8pO3BVEWXSIkdCElfKC/u6pReHcMT7foqqmpwdnZGbGxsRg4cCAAsINMp06dWuHrVq5ciaVLl+LEiRNwcXH57PdVSBBSHoA8evQIcXFxEq0gsri6uqKkpARpaWls/hgAsLCwAAA0a9YMpaWlmDBhAr777jsoKyuz2xQWFmLv3r0VtpK8j7Locou+zAghhFt8ZtENCAiAt7c3XFxc0K5dO6xZswaFhYVsKhYvLy80bNgQYWFhAIAVK1ZgwYIF2LNnD6ytrZGVlQWgLN9bec63T+E8CCkPQB48eIA///wTBgYGn3xNUlISlJSUZN6HXE4sFuPdu3cQi8USQciBAwdQVFSEb7755pPvQ1l0iZBQs7j8KAAmhHvDhg3Ds2fPsGDBAmRlZaFVq1aIiYlhB6ump6dDSem/oaQbN25EcXExvv76a4lyKhr8KgunWXTNzMzw9ddf49q1a/jtt99QWlrKRkb6+vpQU1NDYmIiLl68iK5du0JHRweJiYnw9/fHN998Az09PQBl9x6rqqqiZcuWUFdXx5UrVxAUFIRhw4ZBVVVVoj6RkZEYOHBgpYIdQoSELqSEkA/xncBu6tSpFXa/xMfHSzxPS0ur8vtxmkU3NDQUx46VJcxp1aqVxOv+/PNPdOnSBerq6ti7dy9CQ0NRVFQEGxsb+Pv7S3STqKioYMWKFbh//z4YhoGVlRWmTp0qlWn33r17SEhIwMmTJz93NwghhBDB4XPGVD5QFl3Kois36k4gfKFWJMIXRQ9Mdbfw5Kys0/+e4KwsRaHcMaTWEvqFioI4+dGxI7VVXWsXoCCE1Fp0oaq9hB5gktpL0S0hda07hoIQIje6EBBCCKmKzw5Czp49i/DwcFy9ehWZmZk4fPgwO7EJAISGhmLv3r34999/2clPli5dCldXV3abpUuX4vjx40hKSoKamhry8/Ml3iM3NxejRo3CzZs3kZubC2NjYwwYMADLli2TOefI+fPn0blzZ7Ro0QJJSUmfu0tETkJvaRB6kCT04ydkQj+3hMiL77tjqhunWXQB4IsvvsC6detga2uLN2/eYPXq1fDw8EBycjKMjIwAlGXrGzJkCDp06CBzqnUlJSUMGDAAS5YsgZGREZKTkzFlyhTk5eVhz549Etvm5+fDy8sL3bt3l5pultRtdJEnfKG/PSIvcR0bE1Klu2NEIpFUS8iHXr58CV1dXZw+fRrdu3eXWLd9+3bMmDFDqiVElh9//BHh4eH4999/JZYPHz4cTZs2hbKyMo4cOfLZLSF0d4z8hP5FK/Rfy0I/fkIm9HNLai9Fjwnp1LD7pzeqpLMZsZyVpSgKHRNSXFyMzZs3Q1dXF05OTnKX8+TJExw6dEgqi25UVBQePnyIXbt2YcmSJVWtLvlMdCGoGjp+hJAP1a12EEDp05t8vt9++w3a2trQ0NDA6tWrcerUKRgaGn52OSNGjEC9evXQsGFD1K9fH1u3bmXXPXjwAHPmzMGuXbugolK5WKqoqAgvX76UeNS126EIIYQIlxgMZ4+aQCEtIV27dkVSUhJycnKwZcsWDB06FBcvXvxobhhZVq9ejZCQENy/f59NPrdhwwaUlpZi5MiRWLhwIb744otKl0dZdLkl9O4Eobc0CP34CZnQzy0h8qopwQNXFD4mBACaNm0KX19fBAUFSSz/nDEhCQkJ+Oqrr/DkyRNoampCT09PIpGdWCwGwzBQVlbGyZMn0a1bN6kyioqKUFRUJLFMz8CektgRQgipFEWPCenQsOunN6qkxIw/OStLUaplnhCxWCx18ZenDKAskDAxMcGtW7ck1m/YsAFxcXE4ePAgbGxsZJZBWXQJIYQIWV0bIsBpFl0DAwMsXboU/fv3h5mZGXJycrB+/XpkZGRgyJAh7GvS09ORl5eH9PR0lJaWsne0NGnSBNra2vj999+RnZ2Ntm3bQltbG3///TdmzZqFjh07wtraGgDQokULiXoZGxtDQ0NDanlNR0328hN6kz2dW/kJ/dwSIq+61h3DaRbdTZs24e7du4iOjkZOTg4MDAzQtm1bnDt3Ds2bN2dfs2DBAkRHR7PPW7duDeC/TLuamprYsmUL/P39UVRUBAsLCwwaNAhz5syRe0drKvqyrb3o3BJC6jrKokvzhBBCOEatXLWXqqGtQstva96Js7IuPznLWVmKQrljBI6+zOQn9JYGOrfyE/q5JUReda1dgIIQgRPyly1dRAmRTcifW1I1ir47pq6hIITUWhQkEb7Q3x6RFw1M/YSqZtGNj4+XGNj6vkuXLqFt27a4d+8eJk2ahDt37uDFixcwNzfHyJEjERISAlVVVQDA33//jQULFuDq1at49OgRVq9ejRkzZnz+ESC1ltB/jdKFqvYS+t8ekZ+iW0KoO+YTqppF183NDZmZmRKvCQ4ORmxsLFxcXAAAqqqq8PLyQps2bdCgQQPcuHED48ePh1gsxrJlywAAr1+/hq2tLYYMGQJ/f3959p1UEX3REkIIqQpes+gCwLt379CwYUNMmzYNwcHBFZYTEBCAy5cv49w56V+P1tbWmDFjhlwtIXR3DCGEkMpSdEuIk6kbZ2XdyLrAWVmKopAEduUqk0X32LFjyM3NxZgxYyosJzk5GTExMVJZdAkhhJDahOHwv5pAIQNTf/vtNwwfPhyvX7+GmZnZR7PoRkZGwtPTE40aNZJa5+bmhmvXrqGoqAgTJkzAokWLqlQvWbljGIahqdsJIYQIgpjGhFRdZbPoPn78GCdOnMD+/ftllrNv3z68evUKN27cwKxZs/D9999j9uzZcteLsuhyiwZWVg2NqSGE1HUKCUK0tLTQpEkTNGnSBO3bt0fTpk0RGRkplUU3KioKBgYG6N+/v8xyLCwsAADNmjVDaWkpJkyYgO+++04ie+7nCAoKYqeZL6dnYC9XWUT4hH6RpyBOfkI/t0JGf3fCVlO6UbjCWxZdhmEQFRUFLy8v9rbbT5Xx7t07iMViuYMQyqJLCKnrKICrGkUPTKXumE/gIosuAMTFxSE1NRXjxo2Teo/du3dDVVUVLVu2hLq6Oq5cuYKgoCAMGzaMDViKi4tx584d9t8ZGRlISkqCtrY2mjRp8rm7RUi1o4sBIaSu++xbdCuabKw8i+7IkSNx8eJFiSy68+fPR9u2bSW2HzlyJB49eoTz589LlbVv3z6sXLkS9+/fB8MwsLKywjfffAN/f39oaGgAANLS0mBjYyP12s6dOyM+Pr7S+0O36BJCCKksRbeE2Bu3/fRGlXT36WXOylIUyqJLQQghhJBKUnQQ8oWRC2dl3X92hbOyFIVyxxDCExogKD/qypIf/d0RIaEgRODoC0N+dKEihNQ0de3uGOqOoe4YQgghlaTo7pjGhm04Kysl5xpnZSkK51l03zdp0iT89NNPUhlu+/fvj6SkJDx9+hR6enpwd3fHihUrYG5uDqBs8Ovq1atx6dIlvHz5Ek2bNsWsWbMwatQoifLXrFmDjRs3Ij09HYaGhvj6668RFhbGDl4liiX0Vhqht4QI/fgJmdDPLSGkcjjPolvu8OHD+Ouvv9jA4n1du3bF3LlzYWZmhoyMDMycORNff/01LlwoS7Zz4cIFODo6IjAwECYmJvjtt9/g5eUFXV1d9O3bFwCwZ88ezJkzB9u2bYObmxvu378PHx8fiEQiREREfO5uETnQhaBq6PgRQj5E3TGf8+IKsuhmZGTA1dUVJ06cQJ8+fT6Z4fbYsWMYOHAgioqKKpy4rE+fPjAxMcG2bdsAAFOnTsU///yD2NhYdpvvvvsOFy9eREJCQqX3gbpjCCGEVJaiu2NsDGQne5VHau4NzspSFM4HporFYowePRqzZs1C8+bNP7l9Xl4edu/eDTc3t4/OnPrixQs4ODiwz93c3LBr1y5cunQJ7dq1w8OHD/H7779j9OjRnOwH+TShdycIvaVB6MdPyOjcktpKXMdaQjgPQlasWAEVFRVMnz79o9sFBgZi3bp1eP36Ndq3b4/ffvutwm3379+Py5cv46effmKXjRw5Ejk5Ofjyyy/BMAxKSkowadIkzJ07l7N9IR8n9AuB0NHxq73o3NZeim4JqWs4DUKuXr2KH374AdeuXftkTpZZs2Zh7NixePToERYuXAgvLy/89ttvUq/7888/MWbMGGzZskWiZSU+Ph7Lli3Dhg0b4OrqiuTkZPj5+WHx4sUIDg6W+Z5FRUUyc9hQ/hhCahZqaSC1VV27YZXTMSFr1qxBQEAAlJSU2G1KS0uhpKQECwsLpKWlySzn8ePHsLCwwIULF9ChQwd2+ZkzZ9CnTx9ERERgwoQJEq/56quv0L59e4SHh7PLdu3ahQkTJqCgoECiDuVCQ0OxcOFCyX1Q0oaScv3P3XVCCCF1kKJbQhrpt+CsrMd5tzkrS1E4bQkZPXo03N3dJZZ5enpi9OjRGDNmTIWvE4vFACDRShEfH4++fftixYoVUgEIALx+/Voq0CjPrltRXBUUFISAgACJZXoG9h/ZI/Ix9GuU8EXo3R302SCkcjjNomtpaQkDAwOJ7VVVVWFqago7OzsAwMWLF3H58mV8+eWX0NPTQ0pKCoKDg9G4cWO2FeTPP/9E37594efnh8GDByMrKwsAoKamBn19fQBAv379EBERgdatW7PdMcHBwejXrx8bjHxIXV0d6urqEsuE3hVDX2aE1DxCD5KErK5/51F3zCd8LIvu9u3bpZZbW1tL3KJ769Yt+Pn54caNGygsLISZmRl69uyJ+fPno2HDsttlfXx8EB0dLVXW+xlyS0pKsHTpUuzcuRMZGRkwMjJCv379sHTpUjRo0KDS+0O36BJCCKksRXfHmDVoxllZmfl3OCtLUWjadgpCCCGEVBIFIdyiBHaEEEKIQNS1GVMpCCGEJ3W977sqhD7mgs4tkVdd65ygIIQQngj9QkrkR+e29qLJyrhFQQghhBAiEDRt+yecPXsW4eHhuHr1KjIzM2UmsCs3adIk/PTTT1i9erVEArtr164hMDAQly9fhrKyMgYPHoyIiAhoa2sDAG7cuIHly5cjISEBOTk5sLa2xqRJk+Dn58eWUdFdOpmZmTA1Nf3c3RIsataVn9B/jdK5lZ/Qz62Q0d+dsFF3zCcUFhbCyckJvr6+GDRoUIXbHT58GH/99RfMzc0llj958gTu7u4YNmwY1q1bh5cvX2LGjBnw8fHBwYMHAZRN/25sbIxdu3axM6lOmDABysrKmDp1qkR59+7dQ/36/814amxs/Lm7JGhC/rKlL7OqEfK5JbWX0P/u6vr3ipiCkI/r1asXevXq9dFtMjIyMG3aNJw4cQJ9+vSRWPfbb79BVVUV69evZ2c83bRpExwdHZGcnIwmTZrA19dX4jW2trZITEzEoUOHpIIQY2Pjz5oXhHBH6F9mhJCaR+jfKzQmhFucjwkRi8UYPXo0Zs2aJZFwrlxRURHU1NQkplzX1NQEACQkJKBJkyYyy33x4gU7W+r7WrVqhaKiIrRo0QKhoaHo2LEjR3tCPkXov1iE/mUm9OMnZEI/t4TIi7pjqmjFihVQUVHB9OnTZa7v1q0bAgICEB4eDj8/PxQWFmLOnDkAysZzyHLhwgXs27cPx48fZ5eZmZlh06ZNcHFxQVFREbZu3YouXbrg4sWLaNOmjcxyKIsuIYQIW10PzmlgahVcvXoVP/zwA65du1bhhb158+aIjo5GQEAAgoKCoKysjOnTp8PExERm5tvbt29jwIABCAkJgYeHB7vczs6OzUcDAG5ubkhJScHq1auxc+dOme8dFhYmM4uuiLLoEkKIIAi9lYu6Y7hVpWnbRSKRxN0xa9asQUBAgEQwUVpaCiUlJVhYWCAtLU3i9dnZ2dDS0oJIJEL9+vWxd+9eDBkyhF1/584ddO3aFePGjcPSpUs/WZ9Zs2YhISEBiYmJMtfLagnRM7CnlhA5Cf0Xi9C/zAghNY+ig5D6WraclfWy8CFnZSkKpy0ho0ePhru7u8QyT09PjB49GmPGjJHa3sTEBACwbds2aGhooEePHuy6v//+G926dYO3t3elAhAASEpKgpmZWYXra2IWXSGjizwhhHCL7o75hIKCAiQnJ7PPU1NTkZSUBH19fVhaWsLAwEBie1VVVZiamkp0naxbtw5ubm7Q1tbGqVOnMGvWLCxfvpy9y+X27dvo1q0bPD09ERAQgKysLACAsrIyjIyMAJS1utjY2KB58+Z4+/Yttm7diri4OJw8efKzDwKRD7WEVI3Qjx8hhCjaZwchV65ckZgkLCAgAADg7e2N7du3V6qMS5cuISQkBAUFBbC3t8dPP/2E0aNHs+sPHjyIZ8+eYdeuXdi1axe73MrKiu3SKS4uxnfffYeMjAzUq1cPjo6OOH36tMwJzAghtYvQA0xSeym6O6auJbCr0piQ2kBFrSHfVSB1FLWEyI+CEMIXRQchmppWnJX15s0jzspSFModQ+Qm9IsoXagIIUTYKAghhCcUJBFCPlTXOicoCCGEJ0JvSRIyoQdwdG6JvGhMSB1DY0IIIYRUlqLHhKipN+KsrOKix5yVpSjSU5QSQgghpE5av349rK2toaGhAVdXV1y6dOmj2x84cAD29vbQ0NBAy5Yt8fvvv3/W+1EQQgghhAgEwzCcPT7Xvn37EBAQgJCQEFy7dg1OTk7w9PTE06dPZW5/4cIFjBgxAmPHjsX169cxcOBADBw4ELdv3670e1J3DHXHyE3o/d5CHzdACKl5FN0dw+U16XPr6urqirZt22LdunUAALFYDAsLC0ybNo1NNPu+YcOGobCwEL/99hu7rH379mjVqhU2bdpUqfekgamE8EToQZyQUYBJyKfJypcmK30JUDYB6NWrVxEUFMQuU1JSgru7e4X52BITE9kJS8t5enriyJEjla8kQzjz9u1bJiQkhHn79i3fVZEi5LoxDNWvKoRcN4ah+lWFkOvGMFQ/oQsJCWEASDxCQkJkbpuRkcEAYC5cuCCxfNasWUy7du1kvkZVVZXZs2ePxLL169czxsbGla5jne+O4dLLly+hq6uLFy9eoH79+nxXR4KQ6wZQ/apCyHUDqH5VIeS6AVQ/ofuclpAnT56gYcOGuHDhAjp06MAunz17Ns6cOYOLFy9KvUZNTQ3R0dEYMWIEu2zDhg1YuHAhsrOzK1VH6o4hhBBCaqGKAg5ZDA0NoaysLBU8ZGdnw9TUVOZrTE1NP2t7WejuGEIIIaSOU1NTg7OzM2JjY9llYrEYsbGxEi0j7+vQoYPE9gBw6tSpCreXhVpCCCGEEIKAgAB4e3vDxcUF7dq1w5o1a1BYWIgxY8YAALy8vNCwYUOEhYUBAPz8/NC5c2esWrUKffr0wd69e3HlyhVs3ry50u9JQQiH1NXVERISUunmr+ok5LoBVL+qEHLdAKpfVQi5bgDVr7YZNmwYnj17hgULFiArKwutWrVCTEwMTExMAADp6elQUvqvA8XNzQ179uzB/PnzMXfuXDRt2hRHjhxBixYtKv2eNDCVEEIIIbygMSGEEEII4QUFIYQQQgjhBQUhhBBCCOEFBSGEEEII4QUFIbVQSUkJduzYUekZ6wghhBA+UBBSC6moqGDSpEl4+/Yt31Wp8ZKTk3HixAm8efMGAORKj13XvXz5EkeOHME///zDd1VqrH///Re+vr681uHNmzdISEjAnTt3pNa9ffsWO3bs4KFW//nnn38QFRWFu3fvAgDu3r2LyZMnw9fXF3FxcbzWjVSMghCOCO1i1a5dOyQlJfFah5osNzcX7u7u+OKLL9C7d29kZmYCAMaOHYvvvvuO59oJ29ChQ9lU4G/evIGLiwuGDh0KR0dH/PLLLzzXDnj37h1UVFRw+/ZtvqtSaXl5eYiOjubt/e/fvw8HBwd06tQJLVu2ROfOndnPBAC8ePGCndCKDzExMWjVqhVmzpyJ1q1bIyYmBp06dUJycjIePXoEDw8PCkQEiiYrq6Lc3FwMGzYMcXFxEIlEePDgAWxtbTF27Fjo6elh1apVvNTr22+/RUBAAP799184OztDS0tLYr2joyMv9fpQfn4+Ll26hKdPn0IsFkus8/Ly4qlWgL+/P1RUVJCeng4HBwd2+bBhwxAQEMDbeX3f//73P4hEIqnlIpEIGhoaaNKkCUaOHAk7O7tqrdfZs2cxb948AMDhw4fBMAzy8/MRHR2NJUuWYPDgwdVanw+pqqrC0tISpaWlvNbjfceOHfvo+ocPH1ZTTWQLDAxEixYtcOXKFeTn52PGjBno2LEj4uPjYWlpyWvdAGDRokWYNWsWlixZgr1792LkyJGYPHkyli5dCgAICgrC8uXL0a1bN55rSqRUOt8ukWn06NGMp6cn8++//zLa2tpMSkoKwzAMExMTwzRr1oy3eolEIqmHkpIS+38hOHbsGKOjo8OIRCJGV1eXadCgAfvQ09PjtW4mJiZMUlISwzCMxHlNSUlhtLS0+Kway9vbm9HV1WWsrKyYQYMGMYMGDWKsra2ZBg0aMEOHDmXs7OwYdXV1JiEhoVrrpaGhwaSnpzMMU/b5CAwMZBiGYR49eiSYY7d161amd+/eTG5uLt9VYRiGkfh8VvTg83NrbGzM3Lx5k30uFouZSZMmMZaWlkxKSgqTlZXFa/3q16/PPHjwgGEYhiktLWVUVFSYa9eusetv3brFmJiY8FU98hHUElJFJ0+exIkTJ9CoUSOJ5U2bNsWjR494qhWQmprK23tX1nfffQdfX18sW7YM9erV47s6EgoLC2XWKS8vTzBTQJuammLkyJFYt24dO5WyWCyGn58fdHR0sHfvXkyaNAmBgYFISEiotnpZWFggMTER+vr6iImJwd69ewEAz58/h4aGRrXV42PWrVuH5ORkmJubw8rKSqql8Nq1a9VaHzMzM2zYsAEDBgyQuT4pKQnOzs7VWqf3vXnzBioq/10uRCIRNm7ciKlTp6Jz587Ys2cPb3V7v04AoKSkBA0NDejq6rLrdHR08OLFC76qRj6CgpAqEurFysrKirf3rqyMjAxMnz5dcAEIAHz11VfYsWMHFi9eDKDsC04sFmPlypXo2rUrz7UrExkZifPnz0vkclBSUsK0adPg5uaGZcuWYerUqfjqq6+qtV4zZszAqFGjoK2tDUtLS3Tp0gVAWTdNy5Ytq7UuFRk4cCDfVZDg7OyMq1evVhiEiEQiXseZ2dvb48qVKxJdkwDYsT/9+/fno1osa2trPHjwAI0bNwYAJCYmSnQTpaenw8zMjK/qkY+gIKSKhH6xunPnDtLT01FcXCyxnO8vDQDw9PTElStXYGtry3dVpKxcuRLdu3fHlStXUFxcjNmzZ+Pvv/9GXl4ezp8/z3f1AJTdin337l188cUXEsvv3r3LjnfQ0NCQOW5Ekb799lu0a9cO//77L3r06MEGSba2tliyZEm11qUiISEhfFdBwqxZs1BYWFjh+iZNmuDPP/+sxhpJ+t///oeff/4Zo0ePllq3bt06iMVibNq0iYealZk8ebLEGJ8PE6j98ccfNB5EoCiBXRXdvn0b3bt3R5s2bRAXF4f+/ftLXKzKI/Pq9vDhQ/zvf//DrVu3JH5FlV+QhDAoLzIyEosWLcKYMWPQsmVLqKqqSqznO1B68eIF1q1bhxs3bqCgoABt2rTBlClTBPOLavr06fj5558xd+5ctG3bFgBw+fJlLFu2DCNHjsQPP/yArVu3Yvv27dXaHVOuuLgYqampaNy4sURTvpBcvXqVvXW4efPmaN26Nc81IqSO4XdISu2Qn5/PLFmyhBkyZAjTq1cvZt68ecyTJ094rVPfvn2ZAQMGMM+ePWO0tbWZO3fuMOfOnWPatWvHnD17lte6lRPqILzi4mKmW7duzP3793mrQ2WUlJQwS5YsYUxNTdnjZmpqyixdupQpKSlhGKZsMOi///5brfUqLCxkfH19GWVlZUZZWZkd1Dt16lQmLCysWutSkezsbKZr166MSCRi9PT0GD09PUYkEjHdunVjnj59ynf1CKkzKAippQwMDJgbN24wDFM2cvzu3bsMwzBMbGws06pVKz6rViMYGhoKPgh534sXL5gXL17wXQ2GYRhm+vTpjLOzM3Pu3DlGS0uLDUKOHDkimL+9oUOHMi4uLsydO3fYZX///Tfj4uLCDB8+nMeaEVK3CLONtIZ5+/Ytbt68KXOuC766FEpLS6GjowMAMDQ0xJMnT2BnZwcrKyvcu3ePlzrVJN988w0iIyOxfPlyvqtSKfXr1+e7CqwjR45g3759aN++vcR4lObNmyMlJYXHmv0nJiYGp0+flhho2axZM6xfvx4eHh481oyQuoWCkCqKiYmBl5cXcnJypNaJRCLexl60aNECN27cgI2NDVxdXbFy5Uqoqalh8+bNghoIeubMGXz//fdsv3yzZs0wa9asar+j40MlJSXYtm0bTp8+LXOyt4iICJ5q9p/s7GzMnDkTsbGxePr0qdTdE3z97T179gzGxsZSywsLC6t9kGxFxGKx1BgkoGwisw9/SBBCFIemba+iadOmYciQIcjMzIRYLJZ48Dn4c/78+eyX6aJFi5CamoqvvvoKv//+O3788Ufe6vW+Xbt2wd3dHfXq1cP06dMxffp0aGpqonv37rzPO3D79m20adMGOjo6uH//Pq5fv84+hDIdvo+PD65du4bg4GAcPHgQhw4dknjwxcXFBcePH2eflwceW7duRYcOHfiqloRu3brBz88PT548YZdlZGTA398f3bt356VO7969g6+vr2Dn+KH6EYXguz+optPR0WGSk5P5rkal5ObmMmKxmO9qsOzt7ZmIiAip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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d15472c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:20.964809Z",
     "iopub.status.busy": "2024-04-26T15:20:20.963663Z",
     "iopub.status.idle": "2024-04-26T15:20:20.990472Z",
     "shell.execute_reply": "2024-04-26T15:20:20.989232Z"
    },
    "papermill": {
     "duration": 0.046614,
     "end_time": "2024-04-26T15:20:20.993905",
     "exception": false,
     "start_time": "2024-04-26T15:20:20.947291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name         0.000000\n",
       "Year         3.404475\n",
       "Duration    53.317429\n",
       "Genre       12.102650\n",
       "Rating      48.939326\n",
       "Votes       48.932878\n",
       "Director     3.385131\n",
       "Actor 1     10.426204\n",
       "Actor 2     15.371720\n",
       "Actor 3     20.272100\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "per_missing=df.isnull().sum()*100/len(df)\n",
    "per_missing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a9eabe4",
   "metadata": {
    "papermill": {
     "duration": 0.014832,
     "end_time": "2024-04-26T15:20:21.025605",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.010773",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "****DROP NULL VALUES****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2984e3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.059635Z",
     "iopub.status.busy": "2024-04-26T15:20:21.058975Z",
     "iopub.status.idle": "2024-04-26T15:20:21.089919Z",
     "shell.execute_reply": "2024-04-26T15:20:21.088622Z"
    },
    "papermill": {
     "duration": 0.051419,
     "end_time": "2024-04-26T15:20:21.092539",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.041120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5659"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(axis=0,inplace=True)\n",
    "len(df['Votes'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1013355",
   "metadata": {
    "papermill": {
     "duration": 0.017664,
     "end_time": "2024-04-26T15:20:21.130813",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.113149",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Delete Duplicates**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "26ae0450",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.166410Z",
     "iopub.status.busy": "2024-04-26T15:20:21.165623Z",
     "iopub.status.idle": "2024-04-26T15:20:21.184956Z",
     "shell.execute_reply": "2024-04-26T15:20:21.183713Z"
    },
    "papermill": {
     "duration": 0.039307,
     "end_time": "2024-04-26T15:20:21.187807",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.148500",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dff2f68b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.224712Z",
     "iopub.status.busy": "2024-04-26T15:20:21.223447Z",
     "iopub.status.idle": "2024-04-26T15:20:21.257083Z",
     "shell.execute_reply": "2024-04-26T15:20:21.255620Z"
    },
    "papermill": {
     "duration": 0.053829,
     "end_time": "2024-04-26T15:20:21.260423",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.206594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>#Gadhvi (He thought he was Gandhi)</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>109 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8</td>\n",
       "      <td>Gaurav Bakshi</td>\n",
       "      <td>Rasika Dugal</td>\n",
       "      <td>Vivek Ghamande</td>\n",
       "      <td>Arvind Jangid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>#Yaaram</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>110 min</td>\n",
       "      <td>Comedy, Romance</td>\n",
       "      <td>4.4</td>\n",
       "      <td>35</td>\n",
       "      <td>Ovais Khan</td>\n",
       "      <td>Prateik</td>\n",
       "      <td>Ishita Raj</td>\n",
       "      <td>Siddhant Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>...Aur Pyaar Ho Gaya</td>\n",
       "      <td>(1997)</td>\n",
       "      <td>147 min</td>\n",
       "      <td>Comedy, Drama, Musical</td>\n",
       "      <td>4.7</td>\n",
       "      <td>827</td>\n",
       "      <td>Rahul Rawail</td>\n",
       "      <td>Bobby Deol</td>\n",
       "      <td>Aishwarya Rai Bachchan</td>\n",
       "      <td>Shammi Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>...Yahaan</td>\n",
       "      <td>(2005)</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama, Romance, War</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1,086</td>\n",
       "      <td>Shoojit Sircar</td>\n",
       "      <td>Jimmy Sheirgill</td>\n",
       "      <td>Minissha Lamba</td>\n",
       "      <td>Yashpal Sharma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>?: A Question Mark</td>\n",
       "      <td>(2012)</td>\n",
       "      <td>82 min</td>\n",
       "      <td>Horror, Mystery, Thriller</td>\n",
       "      <td>5.6</td>\n",
       "      <td>326</td>\n",
       "      <td>Allyson Patel</td>\n",
       "      <td>Yash Dave</td>\n",
       "      <td>Muntazir Ahmad</td>\n",
       "      <td>Kiran Bhatia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15493</th>\n",
       "      <td>Zubaan</td>\n",
       "      <td>(2015)</td>\n",
       "      <td>115 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>6.1</td>\n",
       "      <td>408</td>\n",
       "      <td>Mozez Singh</td>\n",
       "      <td>Vicky Kaushal</td>\n",
       "      <td>Sarah Jane Dias</td>\n",
       "      <td>Raaghavv Chanana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15494</th>\n",
       "      <td>Zubeidaa</td>\n",
       "      <td>(2001)</td>\n",
       "      <td>153 min</td>\n",
       "      <td>Biography, Drama, History</td>\n",
       "      <td>6.2</td>\n",
       "      <td>1,496</td>\n",
       "      <td>Shyam Benegal</td>\n",
       "      <td>Karisma Kapoor</td>\n",
       "      <td>Rekha</td>\n",
       "      <td>Manoj Bajpayee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15503</th>\n",
       "      <td>Zulm Ki Zanjeer</td>\n",
       "      <td>(1989)</td>\n",
       "      <td>125 min</td>\n",
       "      <td>Action, Crime, Drama</td>\n",
       "      <td>5.8</td>\n",
       "      <td>44</td>\n",
       "      <td>S.P. Muthuraman</td>\n",
       "      <td>Chiranjeevi</td>\n",
       "      <td>Jayamalini</td>\n",
       "      <td>Rajinikanth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15505</th>\n",
       "      <td>Zulmi</td>\n",
       "      <td>(1999)</td>\n",
       "      <td>129 min</td>\n",
       "      <td>Action, Drama</td>\n",
       "      <td>4.5</td>\n",
       "      <td>655</td>\n",
       "      <td>Kuku Kohli</td>\n",
       "      <td>Akshay Kumar</td>\n",
       "      <td>Twinkle Khanna</td>\n",
       "      <td>Aruna Irani</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15508</th>\n",
       "      <td>Zulm-O-Sitam</td>\n",
       "      <td>(1998)</td>\n",
       "      <td>130 min</td>\n",
       "      <td>Action, Drama</td>\n",
       "      <td>6.2</td>\n",
       "      <td>20</td>\n",
       "      <td>K.C. Bokadia</td>\n",
       "      <td>Dharmendra</td>\n",
       "      <td>Jaya Prada</td>\n",
       "      <td>Arjun Sarja</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5659 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     Name    Year Duration  \\\n",
       "1      #Gadhvi (He thought he was Gandhi)  (2019)  109 min   \n",
       "3                                 #Yaaram  (2019)  110 min   \n",
       "5                    ...Aur Pyaar Ho Gaya  (1997)  147 min   \n",
       "6                               ...Yahaan  (2005)  142 min   \n",
       "8                      ?: A Question Mark  (2012)   82 min   \n",
       "...                                   ...     ...      ...   \n",
       "15493                              Zubaan  (2015)  115 min   \n",
       "15494                            Zubeidaa  (2001)  153 min   \n",
       "15503                     Zulm Ki Zanjeer  (1989)  125 min   \n",
       "15505                               Zulmi  (1999)  129 min   \n",
       "15508                        Zulm-O-Sitam  (1998)  130 min   \n",
       "\n",
       "                           Genre  Rating  Votes         Director  \\\n",
       "1                          Drama     7.0      8    Gaurav Bakshi   \n",
       "3                Comedy, Romance     4.4     35       Ovais Khan   \n",
       "5         Comedy, Drama, Musical     4.7    827     Rahul Rawail   \n",
       "6            Drama, Romance, War     7.4  1,086   Shoojit Sircar   \n",
       "8      Horror, Mystery, Thriller     5.6    326    Allyson Patel   \n",
       "...                          ...     ...    ...              ...   \n",
       "15493                      Drama     6.1    408      Mozez Singh   \n",
       "15494  Biography, Drama, History     6.2  1,496    Shyam Benegal   \n",
       "15503       Action, Crime, Drama     5.8     44  S.P. Muthuraman   \n",
       "15505              Action, Drama     4.5    655       Kuku Kohli   \n",
       "15508              Action, Drama     6.2     20     K.C. Bokadia   \n",
       "\n",
       "               Actor 1                 Actor 2           Actor 3  \n",
       "1         Rasika Dugal          Vivek Ghamande     Arvind Jangid  \n",
       "3              Prateik              Ishita Raj   Siddhant Kapoor  \n",
       "5           Bobby Deol  Aishwarya Rai Bachchan     Shammi Kapoor  \n",
       "6      Jimmy Sheirgill          Minissha Lamba    Yashpal Sharma  \n",
       "8            Yash Dave          Muntazir Ahmad      Kiran Bhatia  \n",
       "...                ...                     ...               ...  \n",
       "15493    Vicky Kaushal         Sarah Jane Dias  Raaghavv Chanana  \n",
       "15494   Karisma Kapoor                   Rekha    Manoj Bajpayee  \n",
       "15503      Chiranjeevi              Jayamalini       Rajinikanth  \n",
       "15505     Akshay Kumar          Twinkle Khanna       Aruna Irani  \n",
       "15508       Dharmendra              Jaya Prada       Arjun Sarja  \n",
       "\n",
       "[5659 rows x 10 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1c20939",
   "metadata": {
    "papermill": {
     "duration": 0.016534,
     "end_time": "2024-04-26T15:20:21.293706",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.277172",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**changee into integer **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fc4fd5d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.328995Z",
     "iopub.status.busy": "2024-04-26T15:20:21.328574Z",
     "iopub.status.idle": "2024-04-26T15:20:21.348521Z",
     "shell.execute_reply": "2024-04-26T15:20:21.346791Z"
    },
    "papermill": {
     "duration": 0.042088,
     "end_time": "2024-04-26T15:20:21.352679",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.310591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#Gadhvi (He thought he was Gandhi)</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>109 min</td>\n",
       "      <td>Drama</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8</td>\n",
       "      <td>Gaurav Bakshi</td>\n",
       "      <td>Rasika Dugal</td>\n",
       "      <td>Vivek Ghamande</td>\n",
       "      <td>Arvind Jangid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>#Yaaram</td>\n",
       "      <td>(2019)</td>\n",
       "      <td>110 min</td>\n",
       "      <td>Comedy, Romance</td>\n",
       "      <td>4.4</td>\n",
       "      <td>35</td>\n",
       "      <td>Ovais Khan</td>\n",
       "      <td>Prateik</td>\n",
       "      <td>Ishita Raj</td>\n",
       "      <td>Siddhant Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>...Aur Pyaar Ho Gaya</td>\n",
       "      <td>(1997)</td>\n",
       "      <td>147 min</td>\n",
       "      <td>Comedy, Drama, Musical</td>\n",
       "      <td>4.7</td>\n",
       "      <td>827</td>\n",
       "      <td>Rahul Rawail</td>\n",
       "      <td>Bobby Deol</td>\n",
       "      <td>Aishwarya Rai Bachchan</td>\n",
       "      <td>Shammi Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>...Yahaan</td>\n",
       "      <td>(2005)</td>\n",
       "      <td>142 min</td>\n",
       "      <td>Drama, Romance, War</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1,086</td>\n",
       "      <td>Shoojit Sircar</td>\n",
       "      <td>Jimmy Sheirgill</td>\n",
       "      <td>Minissha Lamba</td>\n",
       "      <td>Yashpal Sharma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>?: A Question Mark</td>\n",
       "      <td>(2012)</td>\n",
       "      <td>82 min</td>\n",
       "      <td>Horror, Mystery, Thriller</td>\n",
       "      <td>5.6</td>\n",
       "      <td>326</td>\n",
       "      <td>Allyson Patel</td>\n",
       "      <td>Yash Dave</td>\n",
       "      <td>Muntazir Ahmad</td>\n",
       "      <td>Kiran Bhatia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Name    Year Duration  \\\n",
       "0  #Gadhvi (He thought he was Gandhi)  (2019)  109 min   \n",
       "1                             #Yaaram  (2019)  110 min   \n",
       "2                ...Aur Pyaar Ho Gaya  (1997)  147 min   \n",
       "3                           ...Yahaan  (2005)  142 min   \n",
       "4                  ?: A Question Mark  (2012)   82 min   \n",
       "\n",
       "                       Genre  Rating  Votes        Director          Actor 1  \\\n",
       "0                      Drama     7.0      8   Gaurav Bakshi     Rasika Dugal   \n",
       "1            Comedy, Romance     4.4     35      Ovais Khan          Prateik   \n",
       "2     Comedy, Drama, Musical     4.7    827    Rahul Rawail       Bobby Deol   \n",
       "3        Drama, Romance, War     7.4  1,086  Shoojit Sircar  Jimmy Sheirgill   \n",
       "4  Horror, Mystery, Thriller     5.6    326   Allyson Patel        Yash Dave   \n",
       "\n",
       "                  Actor 2          Actor 3  \n",
       "0          Vivek Ghamande    Arvind Jangid  \n",
       "1              Ishita Raj  Siddhant Kapoor  \n",
       "2  Aishwarya Rai Bachchan    Shammi Kapoor  \n",
       "3          Minissha Lamba   Yashpal Sharma  \n",
       "4          Muntazir Ahmad     Kiran Bhatia  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.reset_index(drop=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "834c0cec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.387801Z",
     "iopub.status.busy": "2024-04-26T15:20:21.387325Z",
     "iopub.status.idle": "2024-04-26T15:20:21.409143Z",
     "shell.execute_reply": "2024-04-26T15:20:21.408061Z"
    },
    "papermill": {
     "duration": 0.042695,
     "end_time": "2024-04-26T15:20:21.411901",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.369206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fun(i,j):\n",
    "    return int(i.replace(j, ''))\n",
    "df['Votes'] = [fun(i,',') for i in df['Votes']]\n",
    "df['Duration']=[fun(i,'min') for i in df['Duration']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5d3e03ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.447915Z",
     "iopub.status.busy": "2024-04-26T15:20:21.447218Z",
     "iopub.status.idle": "2024-04-26T15:20:21.463413Z",
     "shell.execute_reply": "2024-04-26T15:20:21.461910Z"
    },
    "papermill": {
     "duration": 0.036965,
     "end_time": "2024-04-26T15:20:21.466288",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.429323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def funy(i):\n",
    "    i = i.replace('(', '').replace(')', '')  \n",
    "    return int(i)\n",
    "\n",
    "df['Year'] = [funy(i) for i in df['Year']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ea578ec8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.507381Z",
     "iopub.status.busy": "2024-04-26T15:20:21.505846Z",
     "iopub.status.idle": "2024-04-26T15:20:21.525204Z",
     "shell.execute_reply": "2024-04-26T15:20:21.523819Z"
    },
    "papermill": {
     "duration": 0.047127,
     "end_time": "2024-04-26T15:20:21.529812",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.482685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5659 entries, 0 to 5658\n",
      "Data columns (total 10 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Name      5659 non-null   object \n",
      " 1   Year      5659 non-null   int64  \n",
      " 2   Duration  5659 non-null   int64  \n",
      " 3   Genre     5659 non-null   object \n",
      " 4   Rating    5659 non-null   float64\n",
      " 5   Votes     5659 non-null   int64  \n",
      " 6   Director  5659 non-null   object \n",
      " 7   Actor 1   5659 non-null   object \n",
      " 8   Actor 2   5659 non-null   object \n",
      " 9   Actor 3   5659 non-null   object \n",
      "dtypes: float64(1), int64(3), object(6)\n",
      "memory usage: 442.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35f39e27",
   "metadata": {
    "papermill": {
     "duration": 0.016723,
     "end_time": "2024-04-26T15:20:21.565109",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.548386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**statistics of our data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2f8e2455",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.603437Z",
     "iopub.status.busy": "2024-04-26T15:20:21.602550Z",
     "iopub.status.idle": "2024-04-26T15:20:21.661637Z",
     "shell.execute_reply": "2024-04-26T15:20:21.659951Z"
    },
    "papermill": {
     "duration": 0.080738,
     "end_time": "2024-04-26T15:20:21.664375",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.583637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5659</td>\n",
       "      <td>5659.000000</td>\n",
       "      <td>5659.000000</td>\n",
       "      <td>5659</td>\n",
       "      <td>5659.000000</td>\n",
       "      <td>5659.000000</td>\n",
       "      <td>5659</td>\n",
       "      <td>5659</td>\n",
       "      <td>5659</td>\n",
       "      <td>5659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5385</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>376</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2431</td>\n",
       "      <td>1960</td>\n",
       "      <td>2321</td>\n",
       "      <td>2556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Baazi</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Drama</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>David Dhawan</td>\n",
       "      <td>Amitabh Bachchan</td>\n",
       "      <td>Rekha</td>\n",
       "      <td>Pran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>844</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41</td>\n",
       "      <td>104</td>\n",
       "      <td>52</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1996.247570</td>\n",
       "      <td>133.439124</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.898533</td>\n",
       "      <td>2697.649585</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19.741839</td>\n",
       "      <td>25.319939</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.381165</td>\n",
       "      <td>13651.503584</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1931.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1983.000000</td>\n",
       "      <td>119.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2002.000000</td>\n",
       "      <td>135.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.100000</td>\n",
       "      <td>131.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2013.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>922.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2021.000000</td>\n",
       "      <td>321.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>591417.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Name         Year     Duration  Genre       Rating          Votes  \\\n",
       "count    5659  5659.000000  5659.000000   5659  5659.000000    5659.000000   \n",
       "unique   5385          NaN          NaN    376          NaN            NaN   \n",
       "top     Baazi          NaN          NaN  Drama          NaN            NaN   \n",
       "freq        4          NaN          NaN    844          NaN            NaN   \n",
       "mean      NaN  1996.247570   133.439124    NaN     5.898533    2697.649585   \n",
       "std       NaN    19.741839    25.319939    NaN     1.381165   13651.503584   \n",
       "min       NaN  1931.000000    21.000000    NaN     1.100000       5.000000   \n",
       "25%       NaN  1983.000000   119.000000    NaN     5.000000      30.000000   \n",
       "50%       NaN  2002.000000   135.000000    NaN     6.100000     131.000000   \n",
       "75%       NaN  2013.000000   150.000000    NaN     6.900000     922.500000   \n",
       "max       NaN  2021.000000   321.000000    NaN    10.000000  591417.000000   \n",
       "\n",
       "            Director           Actor 1 Actor 2 Actor 3  \n",
       "count           5659              5659    5659    5659  \n",
       "unique          2431              1960    2321    2556  \n",
       "top     David Dhawan  Amitabh Bachchan   Rekha    Pran  \n",
       "freq              41               104      52      57  \n",
       "mean             NaN               NaN     NaN     NaN  \n",
       "std              NaN               NaN     NaN     NaN  \n",
       "min              NaN               NaN     NaN     NaN  \n",
       "25%              NaN               NaN     NaN     NaN  \n",
       "50%              NaN               NaN     NaN     NaN  \n",
       "75%              NaN               NaN     NaN     NaN  \n",
       "max              NaN               NaN     NaN     NaN  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90904b6e",
   "metadata": {
    "papermill": {
     "duration": 0.020036,
     "end_time": "2024-04-26T15:20:21.702241",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.682205",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Rating into 0-1**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ade88e86",
   "metadata": {
    "papermill": {
     "duration": 0.017704,
     "end_time": "2024-04-26T15:20:21.737561",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.719857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "10faf0d9",
   "metadata": {
    "papermill": {
     "duration": 0.018132,
     "end_time": "2024-04-26T15:20:21.775181",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.757049",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Show the Fictorial Data of Yearly Votes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5802b89e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.813687Z",
     "iopub.status.busy": "2024-04-26T15:20:21.813232Z",
     "iopub.status.idle": "2024-04-26T15:20:21.822523Z",
     "shell.execute_reply": "2024-04-26T15:20:21.821078Z"
    },
    "papermill": {
     "duration": 0.032018,
     "end_time": "2024-04-26T15:20:21.825308",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.793290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Name', 'Year', 'Duration', 'Genre', 'Rating', 'Votes', 'Director',\n",
       "       'Actor 1', 'Actor 2', 'Actor 3'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5472edaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.928417Z",
     "iopub.status.busy": "2024-04-26T15:20:21.928027Z",
     "iopub.status.idle": "2024-04-26T15:20:21.943449Z",
     "shell.execute_reply": "2024-04-26T15:20:21.942081Z"
    },
    "papermill": {
     "duration": 0.036686,
     "end_time": "2024-04-26T15:20:21.946243",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.909557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Year\n",
       "2012    9900.971429\n",
       "2007    7212.017094\n",
       "2016    6780.601156\n",
       "2009    5938.805085\n",
       "2020    5819.257143\n",
       "           ...     \n",
       "1932      12.000000\n",
       "1933      12.000000\n",
       "1938      10.600000\n",
       "1939       9.500000\n",
       "1934       8.500000\n",
       "Name: Votes, Length: 91, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Year')['Votes'].mean().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cf234f59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:21.984806Z",
     "iopub.status.busy": "2024-04-26T15:20:21.984368Z",
     "iopub.status.idle": "2024-04-26T15:20:26.142978Z",
     "shell.execute_reply": "2024-04-26T15:20:26.141806Z"
    },
    "papermill": {
     "duration": 4.182549,
     "end_time": "2024-04-26T15:20:26.146605",
     "exception": false,
     "start_time": "2024-04-26T15:20:21.964056",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Votes By Year')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Year',y='Votes',data=df)\n",
    "plt.title('Votes By Year')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6cd6de6",
   "metadata": {
    "papermill": {
     "duration": 0.017653,
     "end_time": "2024-04-26T15:20:26.183201",
     "exception": false,
     "start_time": "2024-04-26T15:20:26.165548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Fictorial Data Of Director By Votes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "960da693",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:26.221829Z",
     "iopub.status.busy": "2024-04-26T15:20:26.220817Z",
     "iopub.status.idle": "2024-04-26T15:20:26.242482Z",
     "shell.execute_reply": "2024-04-26T15:20:26.241457Z"
    },
    "papermill": {
     "duration": 0.044084,
     "end_time": "2024-04-26T15:20:26.245470",
     "exception": false,
     "start_time": "2024-04-26T15:20:26.201386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Director</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3146</th>\n",
       "      <td>Love Qubool Hai</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Saif Ali Sayeed</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027</th>\n",
       "      <td>Half Songs</td>\n",
       "      <td>9.7</td>\n",
       "      <td>Sriram Raja</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1897</th>\n",
       "      <td>Gho Gho Rani</td>\n",
       "      <td>9.4</td>\n",
       "      <td>Munni Pankaj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2574</th>\n",
       "      <td>June</td>\n",
       "      <td>9.4</td>\n",
       "      <td>Suhrud Godbole</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5165</th>\n",
       "      <td>The Reluctant Crime</td>\n",
       "      <td>9.4</td>\n",
       "      <td>Arvind Pratap</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>536</th>\n",
       "      <td>Ashok Vatika</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Rahul Mallick</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>692</th>\n",
       "      <td>Baikunth</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Vishwa Bhanu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1919</th>\n",
       "      <td>God of gods</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Venkatesh Bk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3149</th>\n",
       "      <td>Love Sorries</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Gautam Joshi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4321</th>\n",
       "      <td>Refl3ct</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Nikhil Mahar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Name  Rating         Director\n",
       "3146      Love Qubool Hai    10.0  Saif Ali Sayeed\n",
       "2027           Half Songs     9.7      Sriram Raja\n",
       "1897         Gho Gho Rani     9.4     Munni Pankaj\n",
       "2574                 June     9.4   Suhrud Godbole\n",
       "5165  The Reluctant Crime     9.4    Arvind Pratap\n",
       "536          Ashok Vatika     9.3    Rahul Mallick\n",
       "692              Baikunth     9.3     Vishwa Bhanu\n",
       "1919          God of gods     9.3     Venkatesh Bk\n",
       "3149         Love Sorries     9.3     Gautam Joshi\n",
       "4321              Refl3ct     9.3     Nikhil Mahar"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top10=df.nlargest(10,'Rating')[['Name','Rating','Director']]\n",
    "top10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bccbe59f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:26.286945Z",
     "iopub.status.busy": "2024-04-26T15:20:26.285464Z",
     "iopub.status.idle": "2024-04-26T15:20:26.635436Z",
     "shell.execute_reply": "2024-04-26T15:20:26.634166Z"
    },
    "papermill": {
     "duration": 0.374077,
     "end_time": "2024-04-26T15:20:26.638200",
     "exception": false,
     "start_time": "2024-04-26T15:20:26.264123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Rating', ylabel='Name'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Rating',y='Name',data=top10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1522e39c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:26.680711Z",
     "iopub.status.busy": "2024-04-26T15:20:26.680306Z",
     "iopub.status.idle": "2024-04-26T15:20:27.090334Z",
     "shell.execute_reply": "2024-04-26T15:20:27.089069Z"
    },
    "papermill": {
     "duration": 0.435911,
     "end_time": "2024-04-26T15:20:27.093576",
     "exception": false,
     "start_time": "2024-04-26T15:20:26.657665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numeric_df = df.select_dtypes(include='number')\n",
    "corr = numeric_df.corr()\n",
    "sns.heatmap(corr,annot=True,cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e772969",
   "metadata": {
    "papermill": {
     "duration": 0.02008,
     "end_time": "2024-04-26T15:20:27.135109",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.115029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Label Encoders**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "06de4587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.176391Z",
     "iopub.status.busy": "2024-04-26T15:20:27.176015Z",
     "iopub.status.idle": "2024-04-26T15:20:27.405103Z",
     "shell.execute_reply": "2024-04-26T15:20:27.403829Z"
    },
    "papermill": {
     "duration": 0.252928,
     "end_time": "2024-04-26T15:20:27.407751",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.154823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>#Gadhvi (He thought he was Gandhi)</td>\n",
       "      <td>2019</td>\n",
       "      <td>109</td>\n",
       "      <td>229</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8</td>\n",
       "      <td>629</td>\n",
       "      <td>1352</td>\n",
       "      <td>Vivek Ghamande</td>\n",
       "      <td>Arvind Jangid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>#Yaaram</td>\n",
       "      <td>2019</td>\n",
       "      <td>110</td>\n",
       "      <td>184</td>\n",
       "      <td>4.4</td>\n",
       "      <td>35</td>\n",
       "      <td>1335</td>\n",
       "      <td>1198</td>\n",
       "      <td>Ishita Raj</td>\n",
       "      <td>Siddhant Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>...Aur Pyaar Ho Gaya</td>\n",
       "      <td>1997</td>\n",
       "      <td>147</td>\n",
       "      <td>157</td>\n",
       "      <td>4.7</td>\n",
       "      <td>827</td>\n",
       "      <td>1530</td>\n",
       "      <td>378</td>\n",
       "      <td>Aishwarya Rai Bachchan</td>\n",
       "      <td>Shammi Kapoor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>...Yahaan</td>\n",
       "      <td>2005</td>\n",
       "      <td>142</td>\n",
       "      <td>289</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1086</td>\n",
       "      <td>2044</td>\n",
       "      <td>692</td>\n",
       "      <td>Minissha Lamba</td>\n",
       "      <td>Yashpal Sharma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>?: A Question Mark</td>\n",
       "      <td>2012</td>\n",
       "      <td>82</td>\n",
       "      <td>320</td>\n",
       "      <td>5.6</td>\n",
       "      <td>326</td>\n",
       "      <td>135</td>\n",
       "      <td>1934</td>\n",
       "      <td>Muntazir Ahmad</td>\n",
       "      <td>Kiran Bhatia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Name  Year  Duration  Genre  Rating  Votes  \\\n",
       "0  #Gadhvi (He thought he was Gandhi)  2019       109    229     7.0      8   \n",
       "1                             #Yaaram  2019       110    184     4.4     35   \n",
       "2                ...Aur Pyaar Ho Gaya  1997       147    157     4.7    827   \n",
       "3                           ...Yahaan  2005       142    289     7.4   1086   \n",
       "4                  ?: A Question Mark  2012        82    320     5.6    326   \n",
       "\n",
       "   Director  Actor 1                 Actor 2          Actor 3  \n",
       "0       629     1352          Vivek Ghamande    Arvind Jangid  \n",
       "1      1335     1198              Ishita Raj  Siddhant Kapoor  \n",
       "2      1530      378  Aishwarya Rai Bachchan    Shammi Kapoor  \n",
       "3      2044      692          Minissha Lamba   Yashpal Sharma  \n",
       "4       135     1934          Muntazir Ahmad     Kiran Bhatia  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "cols=['Genre','Director','Actor 1']\n",
    "le=LabelEncoder()\n",
    "for i in cols:\n",
    "    df[i]=le.fit_transform(df[i])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6e318b17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.450874Z",
     "iopub.status.busy": "2024-04-26T15:20:27.450405Z",
     "iopub.status.idle": "2024-04-26T15:20:27.458396Z",
     "shell.execute_reply": "2024-04-26T15:20:27.457014Z"
    },
    "papermill": {
     "duration": 0.033048,
     "end_time": "2024-04-26T15:20:27.461372",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.428324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Name', 'Year', 'Duration', 'Genre', 'Rating', 'Votes', 'Director',\n",
       "       'Actor 1', 'Actor 2', 'Actor 3'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8e6754f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.506371Z",
     "iopub.status.busy": "2024-04-26T15:20:27.505634Z",
     "iopub.status.idle": "2024-04-26T15:20:27.522124Z",
     "shell.execute_reply": "2024-04-26T15:20:27.520872Z"
    },
    "papermill": {
     "duration": 0.04168,
     "end_time": "2024-04-26T15:20:27.524561",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.482881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>109</td>\n",
       "      <td>229</td>\n",
       "      <td>8</td>\n",
       "      <td>629</td>\n",
       "      <td>1352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>110</td>\n",
       "      <td>184</td>\n",
       "      <td>35</td>\n",
       "      <td>1335</td>\n",
       "      <td>1198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1997</td>\n",
       "      <td>147</td>\n",
       "      <td>157</td>\n",
       "      <td>827</td>\n",
       "      <td>1530</td>\n",
       "      <td>378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2005</td>\n",
       "      <td>142</td>\n",
       "      <td>289</td>\n",
       "      <td>1086</td>\n",
       "      <td>2044</td>\n",
       "      <td>692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012</td>\n",
       "      <td>82</td>\n",
       "      <td>320</td>\n",
       "      <td>326</td>\n",
       "      <td>135</td>\n",
       "      <td>1934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2014</td>\n",
       "      <td>116</td>\n",
       "      <td>37</td>\n",
       "      <td>11</td>\n",
       "      <td>401</td>\n",
       "      <td>302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2004</td>\n",
       "      <td>96</td>\n",
       "      <td>229</td>\n",
       "      <td>17</td>\n",
       "      <td>1083</td>\n",
       "      <td>1354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2016</td>\n",
       "      <td>120</td>\n",
       "      <td>316</td>\n",
       "      <td>59</td>\n",
       "      <td>266</td>\n",
       "      <td>1138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1991</td>\n",
       "      <td>161</td>\n",
       "      <td>323</td>\n",
       "      <td>983</td>\n",
       "      <td>1374</td>\n",
       "      <td>643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2012</td>\n",
       "      <td>166</td>\n",
       "      <td>159</td>\n",
       "      <td>512</td>\n",
       "      <td>1506</td>\n",
       "      <td>681</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Duration  Genre  Votes  Director  Actor 1\n",
       "0  2019       109    229      8       629     1352\n",
       "1  2019       110    184     35      1335     1198\n",
       "2  1997       147    157    827      1530      378\n",
       "3  2005       142    289   1086      2044      692\n",
       "4  2012        82    320    326       135     1934\n",
       "5  2014       116     37     11       401      302\n",
       "6  2004        96    229     17      1083     1354\n",
       "7  2016       120    316     59       266     1138\n",
       "8  1991       161    323    983      1374      643\n",
       "9  2012       166    159    512      1506      681"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=df.drop(columns=['Name','Actor 2','Actor 3','Rating'],axis=1)\n",
    "y=df['Rating']\n",
    "x.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b2e4a3b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.572467Z",
     "iopub.status.busy": "2024-04-26T15:20:27.572038Z",
     "iopub.status.idle": "2024-04-26T15:20:27.577619Z",
     "shell.execute_reply": "2024-04-26T15:20:27.576440Z"
    },
    "papermill": {
     "duration": 0.032088,
     "end_time": "2024-04-26T15:20:27.580233",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.548145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler=MinMaxScaler()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "9b2f47bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.624669Z",
     "iopub.status.busy": "2024-04-26T15:20:27.623554Z",
     "iopub.status.idle": "2024-04-26T15:20:27.759075Z",
     "shell.execute_reply": "2024-04-26T15:20:27.757948Z"
    },
    "papermill": {
     "duration": 0.160131,
     "end_time": "2024-04-26T15:20:27.761714",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.601583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split,cross_val_score\n",
    "def classify(model,x,y):\n",
    "    x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)\n",
    "    model.fit(x_train,y_train)\n",
    "    print('ACCURACY : ',model.score(x_test,y_test))\n",
    "    score=cross_val_score(model,x,y,cv=5)\n",
    "    print(\"csv Score : \",np.mean(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b7faa662",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:27.806140Z",
     "iopub.status.busy": "2024-04-26T15:20:27.805705Z",
     "iopub.status.idle": "2024-04-26T15:20:28.024927Z",
     "shell.execute_reply": "2024-04-26T15:20:28.023619Z"
    },
    "papermill": {
     "duration": 0.24474,
     "end_time": "2024-04-26T15:20:28.027629",
     "exception": false,
     "start_time": "2024-04-26T15:20:27.782889",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACCURACY :  0.0851695154416422\n",
      "csv Score :  0.08220750872195645\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "le=LinearRegression()\n",
    "classify(le,x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "258f50fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:28.072790Z",
     "iopub.status.busy": "2024-04-26T15:20:28.071385Z",
     "iopub.status.idle": "2024-04-26T15:20:28.437056Z",
     "shell.execute_reply": "2024-04-26T15:20:28.435334Z"
    },
    "papermill": {
     "duration": 0.392605,
     "end_time": "2024-04-26T15:20:28.441778",
     "exception": false,
     "start_time": "2024-04-26T15:20:28.049173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACCURACY :  0.7356890459363957\n",
      "csv Score :  0.7381163047179863\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "y_binarized = (y > 5.0).astype(int)\n",
    "log= LogisticRegression()\n",
    "classify(log,x,y_binarized)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6b160f52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:28.535265Z",
     "iopub.status.busy": "2024-04-26T15:20:28.534526Z",
     "iopub.status.idle": "2024-04-26T15:20:48.831819Z",
     "shell.execute_reply": "2024-04-26T15:20:48.829865Z"
    },
    "papermill": {
     "duration": 20.347073,
     "end_time": "2024-04-26T15:20:48.835019",
     "exception": false,
     "start_time": "2024-04-26T15:20:28.487946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACCURACY :  0.7639575971731449\n",
      "csv Score :  0.7752222149322185\n"
     ]
    }
   ],
   "source": [
    "from catboost import CatBoostClassifier\n",
    "cat=CatBoostClassifier(verbose=0)\n",
    "classify(cat,x,y_binarized)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b73c02d8",
   "metadata": {
    "papermill": {
     "duration": 0.021845,
     "end_time": "2024-04-26T15:20:48.878537",
     "exception": false,
     "start_time": "2024-04-26T15:20:48.856692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Model generating**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "506db277",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:20:48.924829Z",
     "iopub.status.busy": "2024-04-26T15:20:48.923338Z",
     "iopub.status.idle": "2024-04-26T15:22:39.169978Z",
     "shell.execute_reply": "2024-04-26T15:22:39.168523Z"
    },
    "papermill": {
     "duration": 110.293279,
     "end_time": "2024-04-26T15:22:39.194082",
     "exception": false,
     "start_time": "2024-04-26T15:20:48.900803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<catboost.core.CatBoostClassifier at 0x7b8c1a8ecd30>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=CatBoostClassifier(verbose=0)\n",
    "model.fit(x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab123854",
   "metadata": {
    "papermill": {
     "duration": 0.021883,
     "end_time": "2024-04-26T15:22:39.239941",
     "exception": false,
     "start_time": "2024-04-26T15:22:39.218058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Before trained**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3687ead5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:22:39.287462Z",
     "iopub.status.busy": "2024-04-26T15:22:39.287033Z",
     "iopub.status.idle": "2024-04-26T15:22:39.298551Z",
     "shell.execute_reply": "2024-04-26T15:22:39.296960Z"
    },
    "papermill": {
     "duration": 0.038179,
     "end_time": "2024-04-26T15:22:39.301694",
     "exception": false,
     "start_time": "2024-04-26T15:22:39.263515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    7.0\n",
       "1    4.4\n",
       "2    4.7\n",
       "3    7.4\n",
       "4    5.6\n",
       "Name: Rating, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Rating'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "588d0ae6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:22:39.349553Z",
     "iopub.status.busy": "2024-04-26T15:22:39.349114Z",
     "iopub.status.idle": "2024-04-26T15:22:39.518767Z",
     "shell.execute_reply": "2024-04-26T15:22:39.517319Z"
    },
    "papermill": {
     "duration": 0.195289,
     "end_time": "2024-04-26T15:22:39.521449",
     "exception": false,
     "start_time": "2024-04-26T15:22:39.326160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    7.0\n",
       "1    4.4\n",
       "2    4.7\n",
       "3    7.4\n",
       "4    5.6\n",
       "Name: Rating, dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Rating']=model.predict(x)\n",
    "df['Rating'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ef97ec5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-26T15:22:39.569827Z",
     "iopub.status.busy": "2024-04-26T15:22:39.569368Z",
     "iopub.status.idle": "2024-04-26T15:22:39.588810Z",
     "shell.execute_reply": "2024-04-26T15:22:39.587486Z"
    },
    "papermill": {
     "duration": 0.047926,
     "end_time": "2024-04-26T15:22:39.591403",
     "exception": false,
     "start_time": "2024-04-26T15:22:39.543477",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Year</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Genre</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Votes</th>\n",
       "      <th>Director</th>\n",
       "      <th>Actor 1</th>\n",
       "      <th>Actor 2</th>\n",
       "      <th>Actor 3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5649</th>\n",
       "      <td>Zindagi Zindabad</td>\n",
       "      <td>2000</td>\n",
       "      <td>140</td>\n",
       "      <td>229</td>\n",
       "      <td>5.7</td>\n",
       "      <td>7</td>\n",
       "      <td>2155</td>\n",
       "      <td>1732</td>\n",
       "      <td>Mita Vashisht</td>\n",
       "      <td>Milind Gunaji</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5650</th>\n",
       "      <td>Zokkomon</td>\n",
       "      <td>2011</td>\n",
       "      <td>109</td>\n",
       "      <td>6</td>\n",
       "      <td>4.0</td>\n",
       "      <td>351</td>\n",
       "      <td>1940</td>\n",
       "      <td>429</td>\n",
       "      <td>Anupam Kher</td>\n",
       "      <td>Manjari Fadnnis</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5651</th>\n",
       "      <td>Zoo</td>\n",
       "      <td>2018</td>\n",
       "      <td>100</td>\n",
       "      <td>229</td>\n",
       "      <td>5.7</td>\n",
       "      <td>78</td>\n",
       "      <td>2039</td>\n",
       "      <td>1584</td>\n",
       "      <td>Prince Daniel</td>\n",
       "      <td>Shatakshi Gupta</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5652</th>\n",
       "      <td>Zor: Never Underestimate the Force</td>\n",
       "      <td>1998</td>\n",
       "      <td>157</td>\n",
       "      <td>49</td>\n",
       "      <td>4.3</td>\n",
       "      <td>268</td>\n",
       "      <td>1881</td>\n",
       "      <td>1734</td>\n",
       "      <td>Sushmita Sen</td>\n",
       "      <td>Milind Gunaji</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5653</th>\n",
       "      <td>Zorro</td>\n",
       "      <td>1975</td>\n",
       "      <td>150</td>\n",
       "      <td>3</td>\n",
       "      <td>5.6</td>\n",
       "      <td>33</td>\n",
       "      <td>2020</td>\n",
       "      <td>1069</td>\n",
       "      <td>Rekha</td>\n",
       "      <td>Urmila Bhatt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5654</th>\n",
       "      <td>Zubaan</td>\n",
       "      <td>2015</td>\n",
       "      <td>115</td>\n",
       "      <td>229</td>\n",
       "      <td>6.1</td>\n",
       "      <td>408</td>\n",
       "      <td>1223</td>\n",
       "      <td>1861</td>\n",
       "      <td>Sarah Jane Dias</td>\n",
       "      <td>Raaghavv Chanana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5655</th>\n",
       "      <td>Zubeidaa</td>\n",
       "      <td>2001</td>\n",
       "      <td>153</td>\n",
       "      <td>133</td>\n",
       "      <td>6.2</td>\n",
       "      <td>1496</td>\n",
       "      <td>2059</td>\n",
       "      <td>763</td>\n",
       "      <td>Rekha</td>\n",
       "      <td>Manoj Bajpayee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5656</th>\n",
       "      <td>Zulm Ki Zanjeer</td>\n",
       "      <td>1989</td>\n",
       "      <td>125</td>\n",
       "      <td>28</td>\n",
       "      <td>5.8</td>\n",
       "      <td>44</td>\n",
       "      <td>1793</td>\n",
       "      <td>406</td>\n",
       "      <td>Jayamalini</td>\n",
       "      <td>Rajinikanth</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5657</th>\n",
       "      <td>Zulmi</td>\n",
       "      <td>1999</td>\n",
       "      <td>129</td>\n",
       "      <td>38</td>\n",
       "      <td>4.5</td>\n",
       "      <td>655</td>\n",
       "      <td>1025</td>\n",
       "      <td>112</td>\n",
       "      <td>Twinkle Khanna</td>\n",
       "      <td>Aruna Irani</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5658</th>\n",
       "      <td>Zulm-O-Sitam</td>\n",
       "      <td>1998</td>\n",
       "      <td>130</td>\n",
       "      <td>38</td>\n",
       "      <td>5.0</td>\n",
       "      <td>20</td>\n",
       "      <td>895</td>\n",
       "      <td>468</td>\n",
       "      <td>Jaya Prada</td>\n",
       "      <td>Arjun Sarja</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    Name  Year  Duration  Genre  Rating  \\\n",
       "5649                    Zindagi Zindabad  2000       140    229     5.7   \n",
       "5650                            Zokkomon  2011       109      6     4.0   \n",
       "5651                                 Zoo  2018       100    229     5.7   \n",
       "5652  Zor: Never Underestimate the Force  1998       157     49     4.3   \n",
       "5653                               Zorro  1975       150      3     5.6   \n",
       "5654                              Zubaan  2015       115    229     6.1   \n",
       "5655                            Zubeidaa  2001       153    133     6.2   \n",
       "5656                     Zulm Ki Zanjeer  1989       125     28     5.8   \n",
       "5657                               Zulmi  1999       129     38     4.5   \n",
       "5658                        Zulm-O-Sitam  1998       130     38     5.0   \n",
       "\n",
       "      Votes  Director  Actor 1          Actor 2           Actor 3  \n",
       "5649      7      2155     1732    Mita Vashisht     Milind Gunaji  \n",
       "5650    351      1940      429      Anupam Kher   Manjari Fadnnis  \n",
       "5651     78      2039     1584    Prince Daniel   Shatakshi Gupta  \n",
       "5652    268      1881     1734     Sushmita Sen     Milind Gunaji  \n",
       "5653     33      2020     1069            Rekha      Urmila Bhatt  \n",
       "5654    408      1223     1861  Sarah Jane Dias  Raaghavv Chanana  \n",
       "5655   1496      2059      763            Rekha    Manoj Bajpayee  \n",
       "5656     44      1793      406       Jayamalini       Rajinikanth  \n",
       "5657    655      1025      112   Twinkle Khanna       Aruna Irani  \n",
       "5658     20       895      468       Jaya Prada       Arjun Sarja  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1416444,
     "sourceId": 2346296,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 147.402661,
   "end_time": "2024-04-26T15:22:40.437340",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-26T15:20:13.034679",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
